<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[酒飲みの備忘録]]></title>
  <link href="http://amacbee.github.io/atom.xml" rel="self"/>
  <link href="http://amacbee.github.io/"/>
  <updated>2013-12-08T23:22:56+09:00</updated>
  <id>http://amacbee.github.io/</id>
  <author>
    <name><![CDATA[a.macbee]]></name>
    <email><![CDATA[a.macbee@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NUT Hackathon ver.2 を開催した #nut_hackathon]]></title>
    <link href="http://amacbee.github.io/blog/2013/12/07/1/"/>
    <updated>2013-12-07T21:15:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/12/07/1</id>
    <content type="html"><![CDATA[<p>NUT Hackathon ver.2 と題しまして，去年に引き続き2回目となるNUT Hackathonを開催しました．</br>
詳細はこちら：<a href="https://gist.github.com/amacbee/7804666">https://gist.github.com/amacbee/7804666</a></p>

<!-- more -->


<h1>概要とか</h1>

<p>NUT Hackathon(※長岡技術科学大学Hackathon．私が勝手に呼んでいるだけで名称は適当ですｗ)は大学の公式行事ではなく，プログラミング好きなNUT生(+卒業生)で集まって1日楽しくHackathonをしながら交流しようという非常にゆるーいイベントです．<br/>
何故かこのイベントはプログラム好きな人達の習性の真逆をいく感じで，就学時間帯(1限(8:50)〜5限(17:50))に開催されます．<br/>
今年のテーマはAPIを使って面白いものを作ること(去年もこんなテーマだった気がしないでもないですがｗ)．<br/>
学生3人(<a href="https://twitter.com/takegue">@takegue</a>, <a href="https://twitter.com/followthedm">@followthedm</a>, <a href="https://twitter.com/salinger01101">@salinger01101</a>)を審査員として，各審査員賞と優勝を決めるバトル形式で行いました．</p>

<h1>私が作成したもの</h1>

<p>何か一つAPIを使う・・・ということで，私が主軸において考えたのは，今後の人生でもう使う場面ないんじゃないだろうかというようなAPIを見つけ出してきてアプリを作るということです．<br/>
それを念頭において様々なサイトを巡った結果，最終的に以下のAPIを利用することに決めました．<br/></p>

<ul>
<li>お見合いパーティーAPI：<a href="http://party-calendar.net/top/api/doc">http://party-calendar.net/top/api/doc</a>

<ul>
<li>全国各地で，各社のお見合いパーティー情報を開催場所や日時順で取得できるAPIです</li>
</ul>
</li>
</ul>


<p><a href="http://www2.nhk.or.jp/api/">NHK番組表API</a>と悩みに悩んだ結果，そちらを選択．誰か番組表の方で面白いアプリ作って下さいお願いします←<br/>
このAPIを利用して私が作りたかったアプリは以下のようなものです．<br/>
（細かいエラーを直す＆きちんと機能実装したらそのうち公開するかも。。。）</p>

<ul>
<li>「明日から東京行く！」とか，「今日の夜には京都入り」とかつぶやくと，「予定キャンセルしてこっちいけよ( ﾟДﾟ)y─┛~~」と，行く予定の場所で開催されるお見合いパーティー情報を教えてくれるTwitter bot（ただTwitter化するとこまでは未実装。。。）

<ul>
<li>CaboChaで解析し，ある程度正確に場所情報，時間情報等を考慮してくれる</li>
</ul>
</li>
<li>審査員である<a href="https://twitter.com/salinger01101">@salinger01101</a>を狙い撃ちしてsalinter_filter関数を作成し(※この関数は完成させても非公開予定)，salingerの好みそうなイベント／参加できるイベント(年齢制限 その他)だけを提示する</li>
</ul>


<p>何で予定キャンセルしなきゃなんなんだよ！？的なreplyには「君のためを思って提案したのに(´；ω；｀)ｳｯ…」と返し，「嫌だな〜」的なreplyには「いいから行けよ(# ﾟДﾟ)」と返す地味機能つけてました（いらない</p>

<h1>結果</h1>

<p>優勝はTwitterのアイコンを使って，指定したユーザのアイコンをモザイク画で作ってくれるアプリを作成した<a href="https://twitter.com/Joe_noh">@joe_noh</a>．レポジトリもあった： <a href="https://github.com/Joe-noh/nut_hackathon_2013">Joe-noh/nut_hackathon_2013</a><br/>
ほとんどの参加者がテキスト処理をメインでやってる中，画像処理良かった！<br/>
たけのこたけのこにょっきっきの方も完成したらぜひ公開して下さいヾ(๑╹◡╹)ﾉ”<br/>
各審査員賞は，なんと<a href="">@mihyaeru21</a>が総取りでした．作ったアプリはこちら：<a href="https://twitter.com/protect_secret">https://twitter.com/protect_secret</a><br/>
発言をマスクしてくれるなんて何て便利なんでしょう（時事ネタです）．寝過ごして終了2時間ちょい前くらいに来たとは思えないセンスに脱帽です．<br/>
2人ともおめでとうございます＼(^o^)／！！！</p>

<h1>謝辞などなど</h1>

<p>みなさまお忙しい中，突然のHackathonやろう！招集に応じてくださりありがとうございました．<br/>
分かっていらっしゃるだろうと思いますが，ただの思いつきです←<br/>
でも突貫で決めてやった割には参加者も多くて，すごく楽しくやれたんじゃないかな〜と思います．<br/>
特にかなりフザケて開会／閉会の挨拶とか作ってみたのに，付き合ってくれた審査員の皆様(特に朝早く付きあわせてしまった<a href="https://twitter.com/takegue">@takegue</a>)には本当に感謝してます．ありがとうございました！<br/>
後輩たちには来年もぜひ引き継いで頂きたく・・・笑<br/>
ではみなさまお疲れ様でした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[serverspec を利用したテスト駆動環境構築]]></title>
    <link href="http://amacbee.github.io/blog/2013/11/21/1/"/>
    <updated>2013-11-21T07:30:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/11/21/1</id>
    <content type="html"><![CDATA[<p>とある事情からNLPのローカル開発環境を整えることになり，久しぶりにChefで遊んでます．<br/>
今回はVagrant+Chef+serverspecを利用して，日本語形態素解析器MeCab (+ipadic) を利用するための環境をテスト駆動構築するまでをまとめます．</p>

<!-- more -->


<p>形態素解析器 MeCab について詳しく知りたい方は，以下のサイトを参照して下さい．<br/>
本家：<a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html">http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html</a></p>

<h1>前準備</h1>

<ul>
<li><code>vagrant init</code>→Vagrantfileを編集して，nlpという名前のインスタンスを作成．</li>
<li><code>vagrant ssh-config --host nlp &gt;&gt; ~/.ssh/config</code> してnlpでsshできるよう設定．</li>
<li><code>knife solo init nlp-repo</code>して，chef環境の初期化．</li>
<li><code>knife solo prepare nlp</code>して，Vagrantのインスタンスにchef環境を用意．</li>
</ul>


<h1>大まかな流れ</h1>

<ul>
<li>serverspecのテストで必要な機能について記述，VM環境でコケることを確認．</li>
<li>chefでrecipeを書き，VMに適用する．</li>
<li>再びserverspecのテストを走らせ，全てが通ることを確認する．通らない場合は，通るまでchefによる環境構築を続ける．</li>
</ul>


<h1>serverspec の導入</h1>

<p>なにはともあれ，serverspec をローカル環境に導入しなければ始まりません．<br/>
serverspecは，以下のように簡単にセットアップすることが出来ます（実行するディレクトリはどこでも良い？よう．今回は，Vagrantfileが置かれているnlpディレクトリ上で実行した）．<br/>
詳細に関しては本家サイトを参照して下さい．<br/>
本家：<a href="http://serverspec.org/">http://serverspec.org/</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install serverspec
</span><span class='line'><span class="nv">$ </span>serverspec-init
</span><span class='line'>Select OS <span class="nb">type</span>:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> UN*X
</span><span class='line'>  2<span class="o">)</span> Windows
</span><span class='line'>
</span><span class='line'>Select number: 1
</span><span class='line'>
</span><span class='line'>Select a backend <span class="nb">type</span>:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> SSH
</span><span class='line'>  2<span class="o">)</span> Exec <span class="o">(</span><span class="nb">local</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Select number: 1
</span><span class='line'>
</span><span class='line'>Vagrant instance y/n: n
</span><span class='line'>Input target host name: nlp
</span><span class='line'> + spec/
</span><span class='line'> + spec/nlp/
</span><span class='line'> + spec/nlp/httpd_spec.rb
</span><span class='line'> + spec/spec_helper.rb
</span></code></pre></td></tr></table></div></figure>


<h1>spec/default/***_spec.rb ファイルの作成／1回目のテスト実行</h1>

<p>spec/default/httpd_spec.rb を見本として，***_spec.rb ファイルを作成していきます．<br/>
早速，以下の通り spec/default/mecab_spec.rb を作成しました（spec/default/httpd_spec.rb は削除してしまって問題ありません）．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">file</span><span class="p">(</span><span class="s1">&#39;/usr/local/bin/mecab&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_file</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_executable</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">file</span><span class="p">(</span><span class="s1">&#39;/usr/local/lib/mecab/dic/ipadic/&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_directory</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここまで出来たら，以下のコマンドを実行してテストがfailすることを確認します．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake spec
</span><span class='line'><span class="o">(</span>in /path/to/nlp<span class="o">)</span>
</span><span class='line'>/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
</span><span class='line'>FFF
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> File <span class="s2">&quot;/usr/local/bin/mecab&quot;</span> should be file
</span><span class='line'>     Failure/Error: it <span class="o">{</span> should be_file <span class="o">}</span>
</span><span class='line'>       sudo <span class="nb">test</span> -f /usr/local/bin/mecab
</span><span class='line'>       expected file? to <span class="k">return </span><span class="nb">true</span>, got <span class="nb">false</span>
</span><span class='line'>     <span class="c"># ./spec/nlp/mecab_spec.rb:4:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>  2<span class="o">)</span> File <span class="s2">&quot;/usr/local/bin/mecab&quot;</span> should be executable
</span><span class='line'>     Failure/Error: it <span class="o">{</span> should be_executable <span class="o">}</span>
</span><span class='line'>       sudo stat -c %a /usr/local/bin/mecab
</span><span class='line'>       stat: cannot stat <span class="sb">`</span>/usr/local/bin/mecab<span class="s1">&#39;: そのようなファイルやディレクトリはありません</span>
</span><span class='line'><span class="s1">       expected File &quot;/usr/local/bin/mecab&quot; to be executable</span>
</span><span class='line'><span class="s1">     # ./spec/nlp/mecab_spec.rb:5:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>  3<span class="o">)</span> File <span class="s2">&quot;/usr/local/lib/mecab/dic/ipadic/&quot;</span> should be directory
</span><span class='line'>     Failure/Error: it <span class="o">{</span> should be_directory <span class="o">}</span>
</span><span class='line'>       sudo <span class="nb">test</span> -f /usr/local/lib/mecab/dic/ipadic/
</span><span class='line'>       expected file? to <span class="k">return </span><span class="nb">true</span>, got <span class="nb">false</span>
</span><span class='line'>     <span class="c"># ./spec/nlp/mecab_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.3636 seconds
</span><span class='line'>3 examples, 3 failures
</span><span class='line'>
</span><span class='line'>Failed examples:
</span><span class='line'>
</span><span class='line'>rspec ./spec/nlp/mecab_spec.rb:4 <span class="c"># File &quot;/usr/local/bin/mecab&quot; should be file</span>
</span><span class='line'>rspec ./spec/nlp/mecab_spec.rb:5 <span class="c"># File &quot;/usr/local/bin/mecab&quot; should be executable</span>
</span><span class='line'>rspec ./spec/nlp/mecab_spec.rb:9 <span class="c"># File &quot;/usr/local/lib/mecab/dic/ipadic/&quot; should be directory</span>
</span><span class='line'>/path/to/ruby -S rspec spec/nlp/mecab_spec.rb failed
</span></code></pre></td></tr></table></div></figure>


<h1>mecab本体用のrecipeを作成＆VM環境にインストール</h1>

<p>chefのmecab用recipeを作成します．<br/>
書き方はリンクを参考：<a href="http://docs.opscode.com/resource_script.html">http://docs.opscode.com/resource_script.html</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s2">&quot;mecab&quot;</span><span class="o">][</span><span class="s2">&quot;version&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/mecab-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;http://mecab.googlecode.com/files/mecab-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span>
</span><span class='line'>  <span class="n">checksum</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;mecab&#39;</span><span class="o">][</span><span class="s1">&#39;checksum&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0644&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/usr/local/bin/mecab&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;build_and_install_mecab&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    tar -zxf mecab-#{version}.tar.gz</span>
</span><span class='line'><span class="sh">    (cd mecab-#{version} &amp;&amp; ./configure #{node[&quot;mecab&quot;][&quot;configure_options&quot;]})</span>
</span><span class='line'><span class="sh">    (cd mecab-#{version} &amp;&amp; make &amp;&amp; make check &amp;&amp; make install)</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/usr/local/bin/mecab&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回，attribute/default.rbは以下の通り設定しました．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;mecab&quot;</span><span class="o">][</span><span class="s2">&quot;version&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;0.996&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;mecab&quot;</span><span class="o">][</span><span class="s2">&quot;checksum&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;15baca0983a61c1a49cffd4a919463a0a39ef127&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;mecab&quot;</span><span class="o">][</span><span class="s2">&quot;configure_options&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;--with-charset=utf8 --enable-utf8-only&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>書き終わったら，run_listにrecipe[mecab]を加え，以下のようにVM環境にrecipeをインストールします．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>knife solo cook nlp
</span><span class='line'>Running Chef on nlp...
</span><span class='line'>Checking Chef version...
</span><span class='line'>Uploading the kitchen...
</span><span class='line'>Generating solo config...
</span><span class='line'>Running Chef...
</span><span class='line'>Starting Chef Client, version 11.6.0
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging 2 resources
</span><span class='line'>Recipe: mecab::default
</span><span class='line'>  * remote_file<span class="o">[</span>/var/chef/cache/mecab-0.996.tar.gz<span class="o">]</span> action create
</span><span class='line'>    - create new file /var/chef/cache/mecab-0.996.tar.gz
</span><span class='line'>    - update content in file /var/chef/cache/mecab-0.996.tar.gz from none to e07332
</span><span class='line'>        <span class="o">(</span>new content is binary, diff output suppressed<span class="o">)</span>
</span><span class='line'>    - change mode from <span class="s1">&#39;&#39;</span> to <span class="s1">&#39;0644&#39;</span>
</span><span class='line'>
</span><span class='line'>  * bash<span class="o">[</span>build_and_install_mecab<span class="o">]</span> action run
</span><span class='line'>    - execute <span class="s2">&quot;bash&quot;</span>  <span class="s2">&quot;/tmp/chef-script20131127-3321-1d0z02u&quot;</span>
</span><span class='line'>
</span><span class='line'>Chef Client finished, 2 resources updated
</span></code></pre></td></tr></table></div></figure>


<p>mecabは正しくインストールされたようです．</p>

<h1>2回目のテスト実行</h1>

<p>ここまで出来たところで，serverspecのテストをもう1度実行してみます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake spec
</span><span class='line'><span class="o">(</span>in /path/to/nlp<span class="o">)</span>
</span><span class='line'>/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
</span><span class='line'>..F
</span><span class='line'>
</span><span class='line'>Failures:
</span><span class='line'>
</span><span class='line'>  1<span class="o">)</span> File <span class="s2">&quot;/usr/local/lib/mecab/dic/ipadic/&quot;</span> should be directory
</span><span class='line'>     Failure/Error: it <span class="o">{</span> should be_directory <span class="o">}</span>
</span><span class='line'>       sudo <span class="nb">test</span> -f /usr/local/lib/mecab/dic/ipadic/
</span><span class='line'>       expected file? to <span class="k">return </span><span class="nb">true</span>, got <span class="nb">false</span>
</span><span class='line'>     <span class="c"># ./spec/nlp-default/mecab_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>Finished in 0.25173 seconds
</span><span class='line'>3 examples, 1 failure
</span><span class='line'>
</span><span class='line'>Failed examples:
</span><span class='line'>
</span><span class='line'>rspec ./spec/nlp/mecab_spec.rb:9 <span class="c"># File &quot;/usr/local/lib/mecab/dic/ipadic/&quot; should be directory</span>
</span><span class='line'>/path/to/ruby -S rspec spec/nlp/mecab_spec.rb failed
</span></code></pre></td></tr></table></div></figure>


<p>先ほどと結果が変わっていることが分かります．<br/>
mecab本体用のテストは無事に通ったようです．</p>

<h1>mecab用辞書(mecab-ipadic)のrecipeを作成＆VM環境にインストール</h1>

<p>mecab用辞書をインストールするために，recipe/default.rbに以下の内容を書き加えます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">version</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s2">&quot;ipadic&quot;</span><span class="o">][</span><span class="s2">&quot;version&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/mecab-ipadic-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;https://mecab.googlecode.com/files/mecab-ipadic-</span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span>
</span><span class='line'>  <span class="n">checksum</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;ipadic&#39;</span><span class="o">][</span><span class="s1">&#39;checksum&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0644&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/usr/local/lib/mecab/dic/ipadic&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;build_and_install_ipadic&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    tar -zxf mecab-ipadic-#{version}.tar.gz</span>
</span><span class='line'><span class="sh">    (cd mecab-ipadic-#{version} &amp;&amp; ./configure #{node[&quot;mecab&quot;][&quot;configure_options&quot;]})</span>
</span><span class='line'><span class="sh">    (cd mecab-ipadic-#{version} &amp;&amp; /usr/local/libexec/mecab/mecab-dict-index -f euc-jp -t utf-8)</span>
</span><span class='line'><span class="sh">    (cd mecab-ipadic-#{version} &amp;&amp; make install)</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/usr/local/lib/mecab/dic/ipadic&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>attribute は以下の通り設定しました．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;ipadic&quot;</span><span class="o">][</span><span class="s2">&quot;version&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;2.7.0-20070801&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;ipadic&quot;</span><span class="o">][</span><span class="s2">&quot;checksum&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;0d9d021853ba4bb4adfa782ea450e55bfe1a229b&quot;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s2">&quot;ipadic&quot;</span><span class="o">][</span><span class="s2">&quot;configure_options&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;--with-charset=utf8 --enable-utf8-only&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>書き終わったら，knifeコマンドをもう一度実行します．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Running Chef on nlp...
</span><span class='line'>Checking Chef version...
</span><span class='line'>Uploading the kitchen...
</span><span class='line'>Generating solo config...
</span><span class='line'>Running Chef...
</span><span class='line'>Starting Chef Client, version 11.6.0
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging 4 resources
</span><span class='line'>Recipe: mecab::default
</span><span class='line'>  * remote_file<span class="o">[</span>/var/chef/cache/mecab-0.996.tar.gz<span class="o">]</span> action create <span class="o">(</span>skipped due to not_if<span class="o">)</span>
</span><span class='line'>  * bash<span class="o">[</span>build_and_install_mecab<span class="o">]</span> action run <span class="o">(</span>skipped due to not_if<span class="o">)</span>
</span><span class='line'>  * remote_file<span class="o">[</span>/var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz<span class="o">]</span> action create
</span><span class='line'>    - create new file /var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz
</span><span class='line'>    - update content in file /var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz from none to b62f52
</span><span class='line'>        <span class="o">(</span>file sizes exceed 10000000 bytes, diff output suppressed<span class="o">)</span>
</span><span class='line'>    - change mode from <span class="s1">&#39;&#39;</span> to <span class="s1">&#39;0644&#39;</span>
</span><span class='line'>
</span><span class='line'>  * bash<span class="o">[</span>build_and_install_ipadic<span class="o">]</span> action run
</span><span class='line'>    - execute <span class="s2">&quot;bash&quot;</span>  <span class="s2">&quot;/tmp/chef-script20131127-8352-omxnss&quot;</span>
</span><span class='line'>
</span><span class='line'>Chef Client finished, 2 resources updated
</span></code></pre></td></tr></table></div></figure>


<p>mecab-ipadicは正しくインストールされたようです．</p>

<h1>3回目のテスト実行</h1>

<p>ここまで出来たところで，serverspecのテストをもう1度実行してみます．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>in /path/to/nlp<span class="o">)</span>
</span><span class='line'>/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Finished in 0.34858 seconds
</span><span class='line'>3 examples, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>ようやくMeCabの導入に成功しました！</p>

<h1>まとめ</h1>

<p>上記のように，CaboChaなんかも入れていこうと思ってます．<br/>
すべて導入し終わったら，Githubに公開予定です！<br/>
（気力があれば）ブログにもまとめます．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ISUCON#3の予選に参加してきた]]></title>
    <link href="http://amacbee.github.io/blog/2013/10/07/1/"/>
    <updated>2013-10-07T02:14:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/10/07/1</id>
    <content type="html"><![CDATA[<p>ISUCON#3のオンライン予選に参加したことのまとめです．<br/>
メンバーのブログに関しては以下を参照．<br/>
<a href="http://shiro-goma.hatenablog.com/entry/2013/10/07/202913">魔王軍としてisucon3予選学生領を制圧してきた</a></p>

<!-- more -->


<h1>ISUCONとは</h1>

<p>ISUCON（Iikanjini Speed Up Contest）とは，チーム対抗（最大3人まで）でWebサービスを決められたレギュレーションの中で限界まで高速化し，その結果で競い合うチューニングバトルです．今回で3回目となる本大会は，LINE株式会社様，株式会社データホテル様，面白法人カヤック様の3社共催で，優勝賞金ドドンと100万円の超ビッグイベントとなりました．<br/>
公式：<a href="http://isucon.net/archives/29328289.html">優勝賞金ドドンと100万円！ 第三回 ISUCON 開催のお知らせ #isucon</a><br>
そんなISUCONに今年から学生枠が設けられ，学生限定夏期講習なども行われました．<br/>
参考：<a href="http://isucon.net/archives/30431015.html">ISUCON 夏期講習を開催しました</a><br/>
私もこの夏期講習に参加させて頂いたのですが，折角色々なことを教えて頂いたし，また夏期講習では結果を残せなくて悔しい思いをしたので，リベンジの意味も込めて学生枠でのISUCON#3への参加を決めました with <a href="https://twitter.com/46goma_goma">@46goma_goma</a> and <a href="https://twitter.com/cosadn">@cosadn</a> (某企業内定者チーム)．昨日は本戦出場枠をかけたオンライン予選が実施されました．</p>

<h1>やったこと</h1>

<h2>前日</h2>

<p>前日の前日が内定式でメンバー全員が東京に集まれる環境だったのと，1日東京で暇していたのとで折角だからと集まって前夜祭が開催されました．
ここで当日の流れを確認．ISUCON夏期講習に参加して得られた学び等から，以下のことを心がけることとしました．<br/></p>

<ul>
<li>当日はまず全員でアプリの仕様を確認し，どのような戦略でいくかを確認する(=全員で戦略をたてて役割分担する)．</li>
<li>Gitを利用して常に変更を管理し，問題があってもすぐに元に戻せるようにする．</li>
</ul>


<p>これとは別に自分に課していた目標は，堅実にいくということです．
できることをして着実にスコアを上げ，タイムアップで何も出来なかったということは無くしたいなと思って臨みました．<br/>
また実際にAWS上で利用予定のアプリの動作検証も行いました．
環境構築担当だった私は，ChefのCookbookが無事に動作するかどうかの検証等を行ったのですが，これが後々にすごく効きました．
一言で言うならば，Amazon Linux，他OSと勝手が違って凄い怖い(´・ω・｀)ｗ<br/>
感想：内定式での二日酔いを引きずったまま飲むビールは超おいしかった←</p>

<h2>予選当日</h2>

<p>前日の頑張りもあり，前半30分ほどで必要な環境構築をすべて終了．Chef可愛いよChef←<br/>
その後行った作業は以下の通り（※自分の作業を中心にまとめます）．</p>

<ul>
<li>私が環境構築している間に，メンバーのみんながアプリの中身を把握してくれた！</li>
<li>前半は主にDB周りを担当．スロークエリを解析してIndex貼ったり，アプリ見てたメンバーと相談しながらクエリを書き換えたり．</li>
<li>全投稿数を表示したり，最新投稿を100件表示したり，ユーザの投稿履歴を表示してるとこがとにかく重い．<br/>
　　→ Redisに移行する作業．重い計算はRedisでなんとかする．<br/>
　　→ なんちゃってレベルでしかRuby使えない私のために，メンバーが大分頑張った＼(^o^)／ｗ<br/>
　　→ 夏期講習でAmazon memcachedには痛い目に合わされてたので，敬遠気味だったのが今考えるとだいぶ良い方向にいった←<br/>
　　→ 一部は実装できたが，やりたかった事すべてを実装するには時間が足りず。。。</li>
</ul>


<p>結果的には，メンバーの1人が担当していたVarnishさんのおかげで大分良い感じに．Varnish可愛いよVarnish←<br/>
その後の低度な情報戦については他メンバーのブログを参照して下さいｗ<br/>
nginxがあまり良い感じに動いてくれなかったり，各種設定等に関しては後から色々見直したいですね。。。<br/>
感想：終わってから飲むビールは本当に美味しくて頑張ってよかったと思った←</p>

<h1>おわり</h1>

<p>終わってからWorker数を増やせばもっとスコアが伸びただろうという根本的なことに気づいたりすることもありましたが，とにかく以上の作業を8時間近く地道に行った結果，学生枠で暫定1位という結果を修めることが出来ました＼(^o^)／<br/>
競技中に提出したスコアが12,000点ちょい，ローカルの実行では16,000点くらい出ました．<br/>
後半私がやらかしまして，AWSが起動しないという大変な事態を引き起こしてしまい，その解決で後半1時間くらいを浪費させてしまいましたorz 個人的に今回一番の反省点です．メンバーのみんなには大変申し訳なかった。。。<br/>
11月9日が本番なので，そのときに失敗を挽回するくらい活躍したいです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef+BerkshelfでISUCON環境の構築]]></title>
    <link href="http://amacbee.github.io/blog/2013/10/03/1/"/>
    <updated>2013-10-03T04:15:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/10/03/1</id>
    <content type="html"><![CDATA[<p>週末のISUCONに向け，VM上にChef+Berkshelfで過去大会の環境を構築して色々と試してます．<br/>
可能な限り楽をして環境を用意がメインテーマです．<br/>
折角なので，その環境構築方法を一部紹介．</p>

<!-- more -->


<h1>事前準備</h1>

<p><a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>で作成した<code>centos6.4</code>のboxを利用して，ISUCONテスト環境用の環境を構築する．<br/>
以下のとおり実行．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init centos-6.4
</span><span class='line'>$ vagrant up
</span><span class='line'>$ vagrant ssh-config --host isucon &gt;&gt; ~/.ssh/config</span></code></pre></td></tr></table></div></figure>


<p>次に，Chefのレポジトリを作成し，ホストにChefをインストールする．<br/>
※コマンドの詳細に関しては，<a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>を参照．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife solo init chef-repo
</span><span class='line'>$ cd chef-repo
</span><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "Initial commit"
</span><span class='line'>$ knife solo prepare vagrant@isucon</span></code></pre></td></tr></table></div></figure>


<h1>Berkshelfの設定</h1>

<p>他の人が作ったCookbookを利用するために，Cookbook管理ツールである<a href="http://berkshelf.com/">Berkshelf</a>を導入する．<br/></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install berkshelf
</span><span class='line'>$ rbenv rehash</span></code></pre></td></tr></table></div></figure>


<h1>ISUCON2環境の構築</h1>

<p>準備ができたところで，実際にISUCONの環境を構築していく．
今回は，例としてISUCON2の環境を構築してみる(使用する言語はruby)．
詳細は下記サイトを参照．<br/>
サイト：<a href="http://blog.livedoor.jp/techblog/archives/67728751.html">自家製 #isucon2 のつくりかた</a></p>

<p>まず，利用できる既存のCookbookを導入する．<br/>
chef-repo内に<code>Berksfile</code>を作成し，以下の内容で保存する．<br/></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>site :opscode
</span><span class='line'>
</span><span class='line'>cookbook 'git'
</span><span class='line'>cookbook 'nodejs', '&gt;= 0.8'
</span><span class='line'>cookbook 'ruby_build'
</span><span class='line'>cookbook 'rbenv', github: "fnichol/chef-rbenv"</span></code></pre></td></tr></table></div></figure>


<p>ソースを指定しない場合はopscodeからダウンロードされることになる．<br/>
以下のコマンドを用いて指定したcookbookをインストールする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>berks install -p cookbooks</span></code></pre></td></tr></table></div></figure>


<p>MySQLのCookbook Ver.が古かったため，MySQLに関しては以下のサイトからCookbookを利用させて頂いた．<br/>
<a href="http://qiita.com/k-motoyan/items/25e64dc054abfa0ff7cb">chefで作るmysql</a><br/>
このmysqlフォルダをcookbookフォルダ以下に設置する．</p>

<p>最後に，<code>nodes/isucon.json</code>ファイルを以下の通り編集する．<br/>
rbenvを設定する際に，以下のページを参考にした．<br/>
<a href="http://qiita.com/ychubachi@github/items/befe8ab4cd0765643628">Chefを新しくしてrbenvをberkshellでvagrantのUbuntuにインストール</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "rbenv": {
</span><span class='line'>    "rubies": ["2.0.0-p195"],
</span><span class='line'>    "global": "2.0.0-p195",
</span><span class='line'>    "gems": {
</span><span class='line'>      "2.0.0-p195": [
</span><span class='line'>        {"name": "bundler"}
</span><span class='line'>      ]
</span><span class='line'>    }
</span><span class='line'>  },
</span><span class='line'>  "run_list": [
</span><span class='line'>    "git",
</span><span class='line'>    "nodejs",
</span><span class='line'>    "ruby_build",
</span><span class='line'>    "rbenv::system",
</span><span class='line'>    "mysql"
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>ここまで出来たら，以下のコマンドでVMに送る．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife solo cook isucon</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ．<br/>
力尽きたのでここまで(^_^;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS 第33回 Scala入学式に参加した]]></title>
    <link href="http://amacbee.github.io/blog/2013/09/29/1/"/>
    <updated>2013-09-29T15:30:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/09/29/1</id>
    <content type="html"><![CDATA[<p>9/28(土) に開催された第33回長岡IT開発者勉強会に参加してきました．<br/>
今回のテーマは「Scala入学式」．Scala大好きな私は狂喜乱舞です＼(^o^)／<br/>
ハッシュタグは #nds33<br/>
サイト：<a href="http://nagaoka.techtalk.jp/no33">http://nagaoka.techtalk.jp/no33</a></p>

<p>以下そのまとめ．</p>

<!-- more -->


<h1>Scala入学式</h1>

<p>早速入学式へ！……の前に，入学するためにはもちろん入学試験を通過する必要があります．<br/>
試験内容は以下を参照：<br/>
<a href="https://gist.github.com/Shinpeim/db00b073f7acd6d5b918">https://gist.github.com/Shinpeim/db00b073f7acd6d5b918</a></p>

<p>Scalaの統合開発環境として，<a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>が紹介されていました．
Scalaを利用する際にはいつもSublime Textを使っていた私も，折角の機会なのでIDEを試してみることに．
使ってみた感想ですが，ちょっともっさりしてるかな？とか，マウス操作が若干煩雑だな…という場面もありましたが，
そんな点が些細に見えるほどIntelliJ賢い．
私の知る範囲では，EmacsでもSublime Textでもここまでの賢さは実現できない．
いつの間にやらScalaにこんな頼もしい相棒ができていたなんて…もっと離れられなくなってしまう←<br/>
IDEの設定には以下のサイトを参考にしました．<br/>
<a href="http://qiita.com/radiocatz/items/c26049e757b9ef5e0820">http://qiita.com/radiocatz/items/c26049e757b9ef5e0820</a></p>

<p>さて，無事に入学試験を通過したところで晴れて入学式の場へ．<br/>
資料は以下を参照：<br/>
<a href="https://gist.github.com/Shinpeim/6740436">https://gist.github.com/Shinpeim/6740436</a></p>

<p>内容としては，Scalaの概要から便利な関数紹介，そして実際のアプリケーション開発という感じ．
ゲームっぽいプログラムを書きながらScalaについて紹介していき，最後の方にはOptionやFutureなども紹介されていました
(途中，メラ？メラって何だっけ？？え？MP消費？・・・あぁゲーム用語か←・・・ってなってたのは内緒)．
そして最後には，実際のアプリケーション作成の例としてぬるぽ→ガッ！ってするbotを作りました．</p>

<p>実際に資料を読めば分かりますが，この勉強会を一言でいうならば「至れりつくせり」．
なんというか・・・本当によく出来た構成だった．
Scalaの魅力をここまでふんだんに取り入れて紹介するのは私には無理だ．
<a href="http://nekogata.hatenablog.com/entry/2013/09/28/185217">@neko_gata_s</a>さん，カッコいいです．<br/>
個人的には，Scalaのモナドな例たちが紹介されているとこが良かった．
Scalaには関数型言語な操作が綺麗に取り入れられてて，スッキリかつ直感的なプログラムが書ける．
ものすごくストレスフリー．
今回はきれいな実装できたなぁ(・∀・)ﾆﾔﾆﾔ・・・ってひたれる←</p>

<p>うん，私の語彙力ではすばらしさのカケラも伝えられないので，とにかくみんな入学しよう．<br>
大事な資料なので2回貼っておきます←<br/>
<a href="https://gist.github.com/Shinpeim/6740436">https://gist.github.com/Shinpeim/6740436</a></p>

<h1>LTの部</h1>

<p>力尽きてきたので簡潔にまとめさせて頂きます(^_^;)</p>

<ul>
<li>ライントレースの話 (@okashoi) <br/>
モータ同士の差異を定式化した話をPID制御の話にまとめて考えるの新しい．
組み込み出身な私にとっては懐かしい式や話がいっぱい出てきて高専を思い出した．</li>
<li>開発者向け勉強会に使えるスペースができました (@nkzn) <br/>
アグリノート・カフェすごく良い！
ネットが利用できて，コンセントがあって・・・そんなカフェを探して東京中を練り歩いている私にはすごく
共感できる話ばかりでした．
こういう場が身近にあると色々と捗ります．</li>
<li>草を回避するゲーム (@jewel_x12) <br/>
草避ける気はあるのか？努力しろ社会は厳しい…先輩からの提言は本当に勉強になります．
Pythonが主人公のシューティングゲームを作ってる姿にも思いましたが，やはり私には発想力が足りない．
精進しよう！</li>
<li>電流と人間 (@moznion) <br/>
はてなインターンから得られた知見？エンターの騒音は人を不快にするから，人間の恐怖心を煽る電流を利用して騒音を減らそうという話．
その発想はなかったｗDeploy失敗するたびに電流流れるってやつが実現しないことを祈る←</li>
<li>テストレベルの話 (@two_pack) <br/>
話の中でもあったように，テストレベルという単語を普段から意識しない・・・というか，今回初めて「あぁ，こんなにテストってあったんだな←」
って人間です(汗) JSTQBシラバス読みますヽ(；´Д｀)ノ</li>
<li>近況報告 @upinetree <br/>
転職の話と，それまでの経験から得られたことのフィードバックな話．転職おめでとうございます！まだ学生な私にはすごくためになる話だった．
将来自分も似たようなことを考えるときがくるのだろうか？</li>
</ul>


<p>東京に行くとこういう感じ求められるのか，頑張らないとな！と思いました(何とは言いません)←<br/>
毎回思うけど，この勉強会はすごく手厚くて本当に勉強になる．また次回もぜひ参加したい．<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant + knife-solo + chef-soloでHello Chef!]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/16/2/"/>
    <updated>2013-07-16T08:27:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/16/2</id>
    <content type="html"><![CDATA[<p><a href="http://amacbee.github.io/blog/2013/07/15/1/">前々回</a>取り上げたVagrantと，環境構築を自動化するツールであるChef Soloを利用して，インフラのコード化にチャレンジ．</p>

<!-- more -->


<h1>はじめに</h1>

<p>NLPな研究室に属するサーバ管理者が，各種マシンの設定を自動化する技術を学ぶためにChefに手を出した話． <br />
今回は，VagrantとChefを実際に動かしてみて，Hello Chef!を実行するところまでをまとめる．<br />
なお，これら一連の手順は，下記の文献を参考にしている．</p>

<p>参考：<a href="http://www.amazon.co.jp/%E5%85%A5%E9%96%80Chef-Solo-Infrastructure-Code-ebook/dp/B00BSPH158">入門Chef Solo &ndash; Infrastructure as Code [Kindle版]</a> <br />
<img src="http://ec2.images-amazon.com/images/I/31u6VLGX2kL._AA278_PIkin4,BottomRight,-51,22_AA300_SH20_OU09_.jpg" alt="入門Chef Solo - Infrastructure as Code" />
※大変良書．この記事を読むよりも，この本を買って読む方が何倍も理解が深まる．</p>

<h1>環境</h1>

<ul>
<li>Virtual Box 4.2.18</li>
<li>Vagrant 1.3.3</li>
</ul>


<h1>Vagrant側の設定</h1>

<p>Cent OS 6.4上に環境を構築する． <br /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add centos-6.4 http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130427.box
</span><span class='line'>$ vagrant init</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant up</code>コマンドを実行する前に，ネットワーク設定を編集する．<br />
ホストOS側からゲストOSへのネットワークアクセスをアクティブにし，かつゲストOSのIPを192.168.50.12に設定する．<br />
※仕様変更により，参考書通りに書いても動作しないので注意．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Vagrantfile
</span><span class='line'>Vagrant::Config.run do |config|
</span><span class='line'>    config.vm.box = "centos-6.4"
</span><span class='line'>    # こちらでは動かないので注意
</span><span class='line'>    # config.vm.network :hostonly, "192.168.50.12"
</span><span class='line'>    # こちらで書き直す
</span><span class='line'>    config.vm.network :private_network, ip: "192.168.50.12"
</span><span class='line'>
</span><span class='line'>    # VMのマシン名設定（おこのみで）
</span><span class='line'>    config.vm.provider :virtualbox do |vb|
</span><span class='line'>        vb.name = "hello-chef"
</span><span class='line'>    end</span></code></pre></td></tr></table></div></figure>


<p><code>vagrant up</code>で起動する． <br />
またknife-soloというツールを利用するために，ゲストOSにsshアクセス出来るようssh-configの設定をホスト側のconfigに書き加えておく（今回は，ホスト名：helloc）．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh-config --host helloc
</span><span class='line'>Host helloc
</span><span class='line'>  HostName 127.0.0.1
</span><span class='line'>  User vagrant
</span><span class='line'>  Port 2222
</span><span class='line'>  UserKnownHostsFile /dev/null
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  PasswordAuthentication no
</span><span class='line'>  IdentityFile "/Users/makabi/.vagrant.d/insecure_private_key"
</span><span class='line'>  IdentitiesOnly yes
</span><span class='line'>  LogLevel FATAL
</span><span class='line'>$ vagrant ssh-config --host helloc &gt;&gt; ~/.ssh/config</span></code></pre></td></tr></table></div></figure>


<p><code>ssh helloc</code>して，ログイン出来たら成功である．<br />
さらに<a href="http://amacbee.github.io/blog/2013/07/16/1/">前回</a>紹介した，saharaも入れておくと良い．</p>

<h1>Chef の導入</h1>

<p>Opscodeが提供しているスクリプトを利用することで，簡単にChefを導入することができる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L http://www.opscode.com/chef/install.sh | sudo bash</span></code></pre></td></tr></table></div></figure>


<p>または，<code>gem install chef</code>でインストールすることも可能．<br /></p>

<p>次に<code>knife</code>の初期設定を行う． <br />
<code>knife</code>とは，Chefをインストールすると自動でインストールされる，レポジトリ操作用のツールである．<br />
以下のコマンドを実行する（色々聞かれるが，全てデフォルトでOK）．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife configure</span></code></pre></td></tr></table></div></figure>


<p>完了すると，~/.chef/knife.rb に<code>knife</code>の設定ファイルが保存される．</p>

<h1>knife-solo の導入</h1>

<p>通常，Chef Soloの各種設定はゲストOS側にログインした上で行われる． <br />
しかしこれだと煩雑なので，リモートから<code>chef-solo</code>を実行できる，<code>knife-solo</code>を導入する．
（<code>knife-solo</code>を利用しない場合に関しては，参考図書の2章と3章で説明されているので，ご一読下さい）． <br />
<code>knife-solo</code>は，<code>knife</code>コマンドに<code>chef-solo</code>向けのコマンドを多数追加するものである． <br />
最新版である0.3.0を導入するために，Versionを指定する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install -v "&gt;=0.3" knife-solo</span></code></pre></td></tr></table></div></figure>


<h1>knife-solo + chef-solo でHello Chef!</h1>

<p>大まかな流れは以下の通りである．</p>

<ol>
<li>レポジトリの作成</li>
<li>ホストに<code>chef-solo</code>をインストール</li>
<li>クックブックの作成</li>
<li>レシピの作成</li>
<li>レシピ転送 &amp; リモート実行</li>
</ol>


<h2>レポジトリの作成</h2>

<p>キッチンとも呼ばれる．作業用ディレクトリ． <br />
1システム1レポジトリ程度の粒度である．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife solo init chef-repo</span></code></pre></td></tr></table></div></figure>


<p>0.3.0からは，テンポラリディレクトリやクックブックのパスを指定する<code>solo.rb</code>の設定ファイルは生成されない． <br />
この下をバージョン管理しておく．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd chef-repo
</span><span class='line'>$ git init
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "initial commit"</span></code></pre></td></tr></table></div></figure>


<h2>ホストにchef-soloをインストール</h2>

<p>指定したサーバに<code>chef-solo</code>をインストール． <br />
このときサーバに必要なのは，ssh &amp; sudoできるログインアカウントだけである． <br /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife solo prepare helloc
</span><span class='line'>$ tree chef-repo/
</span><span class='line'>chef-repo/
</span><span class='line'>├── Berksfile
</span><span class='line'>├── cookbooks
</span><span class='line'>├── data_bags
</span><span class='line'>├── nodes
</span><span class='line'>│   └── helloc.json
</span><span class='line'>├── roles
</span><span class='line'>└── site-cookbooks</span></code></pre></td></tr></table></div></figure>


<p>これで，nodesディレクトリ以下にhelloc.jsonファイルが作成される． <br />
これは，Chef Solo実行時に実行するレシピ群などを記載しておくファイルである． <br />
各ディレクトリの説明を以下に示す．</p>

<ul>
<li>cookbooks, site-cookbooks
クックブックを格納するディレクトリ．cookbooksには第三者の作ったクックブックを，site-cookbooksには自分の作ったクックブックを入れることが推奨されている．</li>
<li>nodes
ノード毎のjsonファイルの格納場所．</li>
<li>data_bags, roles に関しては省略．</li>
</ul>


<h2>クックブックの作成</h2>

<p><code>knife</code>コマンドを利用して，site-cookbooksディレクトリにhelloというクックブックを作成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife cookbook create hello -o site-cookbooks</span></code></pre></td></tr></table></div></figure>


<h2>レシピの作成</h2>

<p><code>knife</code>コマンド実行時にレシピの雛形は作成されているため，これを編集する． <br /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ emacs site-cookbooks/hello/recipes/default.rb
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'># Cookbook Name:: hello
</span><span class='line'># Recipe:: default
</span><span class='line'>#
</span><span class='line'># Copyright 2013, YOUR_COMPANY_NAME
</span><span class='line'>#
</span><span class='line'># All rights reserved - Do Not Redistribute
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>log "Hello, Chef!"</span></code></pre></td></tr></table></div></figure>


<p><code>Resource</code>と呼ばれる様々な命令を与えることで，サーバの状態を決定できる．
主なコマンドの例を以下に紹介する．</p>

<ul>
<li>Package <br />
Packageの状態を記述する（インストール）</li>
<li>Log <br />
Chefのログを操作する</li>
<li>Service <br />
サービスを操作する（サービスの起動／停止，OSブート時に起動するサービスとして登録）</li>
<li>Template <br />
設定ファイルをChefでいじる
指定されたテンプレートを展開し，設定ファイルとして利用できる</li>
</ul>


<p>Chef Solo実行時に実行するレシピも記述しておく． <br />
helloc.jsonを編集する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "run_list": [
</span><span class='line'>        "recipe[hello]"
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h1>レシピ転送 &amp; リモート実行</h1>

<p>最後に，以下のコマンドを用いてホストで<code>chef-solo</code>を実行する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ knife solo cook helloc</span></code></pre></td></tr></table></div></figure>


<p>ここで，以下のような出力がえられれば成功である．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running Chef on helloc...
</span><span class='line'>Checking Chef version...
</span><span class='line'>Uploading the kitchen...
</span><span class='line'>Generating solo config...
</span><span class='line'>Running Chef...
</span><span class='line'>Starting Chef Client, version 11.6.0
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging 1 resources
</span><span class='line'>Recipe: hello::default
</span><span class='line'>  * log[Hello, Chef!] action write
</span><span class='line'>
</span><span class='line'>Chef Client finished, 1 resources updated</span></code></pre></td></tr></table></div></figure>


<p>ここまでがおおまかな流れとなる． <br />
簡単！素晴らしい！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sahara pluginの導入]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/16/1/"/>
    <updated>2013-07-16T07:03:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/16/1</id>
    <content type="html"><![CDATA[<p><a href="http://amacbee.github.io/blog/2013/07/15/1/">前回</a>取り上げたVagrantに，sahara pluginを導入する．</p>

<!-- more -->


<h1>sahara plugin</h1>

<p>OSの状態を記憶し，その地点までのロールバックを可能にする． <br />
gemを利用してインストールできる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant plugin install sahara</span></code></pre></td></tr></table></div></figure>


<h1>ロールバックまでの手順</h1>

<p><code>sandbox</code>モードをonにしておくことで，その地点までのロールバックできる． <br />
ロールバックした状態に決定するためには，commitが必要．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant sandbox on
</span><span class='line'>$ vagrant sandbox rollback
</span><span class='line'>$ vagrant sandbox commit
</span><span class='line'>$ vagrant sandbox off</span></code></pre></td></tr></table></div></figure>


<p>これで間違った変更を加えてしまった場合でも，容易にsandboxをonした地点に戻ることができる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantの使い方まとめ]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/15/1/"/>
    <updated>2013-07-15T18:56:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/15/1</id>
    <content type="html"><![CDATA[<p>Vagrantの使い方まとめ． <br />
Vagrantを利用することで，Virtual BoxやVMWare Fusionで作成された仮想環境を，コマンドラインから簡単に利用できる． <br />
公式サイト：<a href="http://www.vagrantup.com/">http://www.vagrantup.com/</a></p>

<!-- more -->


<h1>事前に用意した環境</h1>

<p>Virtual Box 4.1.26<br />
Downloads | Virtual Box：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>

<h1>インストール</h1>

<p>VagrantはRuby製のツールで，Rubygems.orgに公開されているため，<code>gem</code>を利用して以下の通り簡単にインストールできる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install vagrant</span></code></pre></td></tr></table></div></figure>


<p>ただし現状Rubygems.orgに公開されているVer.は1.0.7止まりなので，最新版を利用したい場合は専用のインストーラを利用する必要がある（今回利用するのは，Ver.1.2.2）． <br />
vagrant | Rubygems.org：<a href="http://rubygems.org/gems/vagrant">http://rubygems.org/gems/vagrant</a> <br />
Vagrant Downloads：<a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></p>

<h1>仮想環境構築の流れ</h1>

<p>以下の流れで仮想環境を構築していく．</p>

<ol>
<li>必要なVagrant Boxの追加</li>
<li>Vagrantの初期化（設定ファイル作成）</li>
<li>Vagrantの実行（仮想マシンの起動）</li>
<li>仮想環境にログイン（ssh）</li>
</ol>


<p>それぞれを順に説明する．</p>

<h2>必要なVagrant Boxの追加</h2>

<p>Vagrantには，既にいくつかベースとなる仮想環境（=Box）が用意されている（リンク先参照）． <br /></p>

<p><a href="http://www.vagrantbox.es/">Vagrantbox.es</a></p>

<p>利用者は必要なBoxを追加するだけで，簡単に仮想環境が構築できる． <br />
Boxの追加には以下のコマンドを利用する． <br />
ここで，titleは作成する仮想環境につける名前，urlは利用するboxのURLである．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add {title} {url}
</span><span class='line'>e.g. vagrant box add test https://dl.dropbox.com/u/7225008/Vagrant/CentOS-6.3-x86_64-minimal.box</span></code></pre></td></tr></table></div></figure>


<p>今回は，Cent OS 6.3 minimal Boxを利用して，testという名前の環境を構築する． <br />
作成した環境のリストを確認したり，作成した環境を削除するには，それぞれ以下のコマンドを用いる． <br /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box list
</span><span class='line'>$ vagrant box remove {title}</span></code></pre></td></tr></table></div></figure>


<h2>Vagrantの初期化（設定ファイル作成）</h2>

<p>作成した環境の初期化を行う． <br />
以下のコマンドを実行すると，初期化と共に仮想環境の設定ファイル（=Vagrantfile）が作成される．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init {title}
</span><span class='line'>e.g. vagrant init test</span></code></pre></td></tr></table></div></figure>


<p>ここで作成されるVagrantfileを利用することで，仮想環境の各種設定が行える．</p>

<h2>Vagrantの実行（仮想マシンの起動）</h2>

<p>ここまで処理が終了したら，後は以下のコマンドを利用することで仮想環境が立ち上がる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>なお，仮想環境の停止や再起動には，それぞれ以下のコマンドを実行する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant halt
</span><span class='line'>$ vagrant reload</span></code></pre></td></tr></table></div></figure>


<p>また，仮想環境内の設定をリセットしたい場合には，以下のコマンドを実行する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant destroy</span></code></pre></td></tr></table></div></figure>


<h2>仮想環境にログイン（ssh）</h2>

<p>以下のコマンドで仮想環境にsshできる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>なおssh接続の設定に関しては，以下のコマンドで確認できる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh-config</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rsyncでディレクトリのバックアップ]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/11/1/"/>
    <updated>2013-07-11T02:18:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/11/1</id>
    <content type="html"><![CDATA[<p>Linuxの標準的バックアップツールrsyncを使ってディレクトリのバックアップを作成する．</p>

<!-- more -->


<p>参考にしたページ達：<br />
<a href="http://www.itmedia.co.jp/enterprise/articles/0804/21/news013.html">http://www.itmedia.co.jp/enterprise/articles/0804/21/news013.html</a> <br />
<a href="http://www.maruko2.com/mw/rsync_%E3%81%A7%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AE%E5%90%8C%E6%9C%9F%EF%BC%88%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%EF%BC%89">http://www.maruko2.com/mw/rsync_でディレクトリの同期（バックアップ）</a> <br />
<a href="http://x68000.q-e-d.net/~68user/unix/pickup?rsync">http://x68000.q-e-d.net/~68user/unix/pickup?rsync</a></p>

<h1>rsyncの実行</h1>

<p>各種オプション等については参考ページにて大変詳細かつ分かりやすく記載されているのでここでは省略．<br />
以下のコマンドを実行した．<br /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rsync -avh /コピー元 /コピー先</span></code></pre></td></tr></table></div></figure>


<p>rsyncではコピー元のディレクトリ名指定に気をつける（スラッシュのあるなしでかなり違う）．</p>

<ul>
<li>rsync -avh /コピー元 /コピー先 <br />
ディレクトリも含めてコピー</li>
<li>rsync -avh /コピー元/ /コピー先 <br />
指定したディレクトリ以下をコピー</li>
</ul>


<p>なお，コピー先の指定の場合はどちらでも大丈夫．</p>

<h1>実行時のエラー</h1>

<p>rsyncを実行してしばらくたつと，以下のメッセージを吐いてバックアップがこけた．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rsync: writefd_unbuffered failed to write 4 bytes to socket [sender]: Broken pipe (32)
</span><span class='line'>rsync: write failed on "ファイル名": No space left on device (28)
</span><span class='line'>rsync error: error in file IO (code 11) at receiver.c(301) [receiver=3.0.6]
</span><span class='line'>rsync: connection unexpectedly closed (31 bytes received so far) [sender]
</span><span class='line'>rsync error: error in rsync protocol data stream (code 12) at io.c(600) [sender=3.0.6]</span></code></pre></td></tr></table></div></figure>


<p>何事だろうと思ってこけたファイルを確認すると，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls
</span><span class='line'>-rw-r--r--. 1 root 96G  3月 10 12:22 2012 /****/***.gz</span></code></pre></td></tr></table></div></figure>


<p>96GB＼(^o^)／ｗ <br />
このファイルに対してコピー先HDDのフォーマットがFAT32だったのが原因だった．<br />
FAT32はファイル制限が4GBなので，どう頑張っても対象ファイルのバックアップはとれない．<br />
詳細はリンク先を参照：<a href="http://glenrothes.blog27.fc2.com/blog-category-4.html">http://glenrothes.blog27.fc2.com/blog-category-4.html</a></p>

<p>NTFSでフォーマットし直して無事にバックアップがとれた．</p>

<h1>rsyncの定期実行</h1>

<p>無事にrsyncが実行できていることを確認したら，cronを利用してrsyncを定期実行させる．<br />
ここで再び問題発生．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ crontab -l
</span><span class='line'>zsh: command not found: crontab
</span><span class='line'>$ which crontab
</span><span class='line'>/usr/bin/which: no crontab in (****)</span></code></pre></td></tr></table></div></figure>


<p>crontabがないのでyumから導入する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ yum install crontabs vixie-cron
</span><span class='line'>$ crontab -l
</span><span class='line'>no crontab for root</span></code></pre></td></tr></table></div></figure>


<p>これでよし． <br />
cronを実行するためにcrondの設定も行う．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service crond status
</span><span class='line'>crond は停止しています
</span><span class='line'>$ service start crond
</span><span class='line'>crond を起動中:                                            [  OK  ]
</span><span class='line'>$ chkconfig crond on
</span><span class='line'>$ chkconfig --list
</span><span class='line'>crond           0:off   1:off   2:on    3:on    4:on    5:on    6:off</span></code></pre></td></tr></table></div></figure>


<p>最後に<code>crontab -e</code>を実行し，に以下の様に処理を追加．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>00 3 * * * root /usr/bin/rsync -avh /コピー元 /コピー先</span></code></pre></td></tr></table></div></figure>


<p>この例では，毎日午前3時にrsyncコマンドによるバックアップ処理を行なっている． <br />
crontabの書き方についてはリンク先参照：<a href="http://www.server-memo.net/tips/crontab.html">http://www.server-memo.net/tips/crontab.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDS 第32回 Githubハンズオンに参加した]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/06/1/"/>
    <updated>2013-07-06T20:23:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/06/1</id>
    <content type="html"><![CDATA[<p>第32回 長岡IT開発者勉強会（NDS）に参加してきましたので感想をまとめる（ハッシュタグ #nds32）．<br />
今回のテーマはGithubハンズオン！<br />
サイト：<a href="http://nagaoka.techtalk.jp/no32">http://nagaoka.techtalk.jp/no32</a></p>

<!-- more -->


<h1>Githubハンズオン</h1>

<p>SourceTreeを利用して，Github（Git）の使い方をひと通り学ぶといった形．<br />
最終的に，ペアを組んでお互いにPull Requestを投げるところまで行うことができた．<br />
普段相手のプロジェクトをForkする機会にめぐまれないので個人的には貴重な体験した．<br />
branch名が日本語という非常に貴重な体験もしたしｗ（Windows陣も文字化けしないという貴重な情報が手に入った←）<br />
Windowsの人が大変そうだった(´・ω・｀)ｗ</p>

<h1>LTの部（5件+飛び入り4件）</h1>

<h2>はじめてのnode.js</h2>

<p>資料：<a href="http://sasaplus1.com/slide-first-time-node.js/">http://sasaplus1.com/slide-first-time-node.js/</a> <br />
node.jsは，興味はあるけど触ったことない…という人向け．凄く面白かった！<br />
nodebrewとかnpmがとても便利そうで，導入への敷居が低い感じ<br />
質問にあったテスト自動化の話など含め大変気になるので，今度使ってみよう．</p>

<h2>意識低いgit or 俺得スクリプト</h2>

<p>ゲームのセーブデータもGitで管理しようよ！という話．<br />
オートセーブされるゲームならGitで管理することも可能←確かに！<br />
Githubを利用してお互いのセーブデータやりとりするとか，これぞソーシャルゲーム！！的な発想凄いｗ<br />
これは流行るんじゃないだろうか．</p>

<h2>実録！勘違いが生んだ悲劇。〜えッ！？修正なんて聞いてないんだけど…。</h2>

<p>「とりあえず」という単語の怖さ．<br />
やはり業務でも研究でも，とりあえずは問題を先送りにすることしかしないんだな．<br />
社会人の皆様方が「これはリアルだな〜」って言っててちょっと怖かった．</p>

<h2>高校生長岡ラーメン選手権の告知</h2>

<p>これは良い話を聞いたのでぜひとも行こう！<br />
高校生ラーメン選手権：<a href="https://www.facebook.com/Koukousei.Ramen.Senshuken">https://www.facebook.com/Koukousei.Ramen.Senshuken</a> <br />
Facebookにお金を払って広告を出すと，どういう事が出来るのか…という事がまとめられていて大変興味深かった．<br />
個人的にはここまでユーザ情報を指定して広告出せるのかという点に怖さを感じたり．<br />
しかも指定した情報のユーザが何人いるのかという事も分かるとか…((((；ﾟДﾟ))))<br />
しかしマーケティングには凄く効果的なんだろう．</p>

<h2>Keynote+Gimpでアイコン作成</h2>

<p>エンジニアはデザイン苦手なんだ！そんなデザイン苦手なエンジニアがアイコン作成したい際にどうするか？という話．<br />
すごく共感する話だった…PPT使った際に似たことするしｗ<br />
しかしフラットデザインとはｗｗｗ</p>

<h2>Rでダイエット</h2>

<p>資料等：<a href="https://github.com/Salinger/R-diet">https://github.com/Salinger/R-diet</a> <br />
Rで利用するデータを作るために痩せました！という話（太れば良いじゃん！と思ったのは内緒）．<br />
痩せる or 太るはともかく，Githubに自分の体重データを載せるという行為を私は尊敬します．<br />
Rによって彼が統計的に痩せていることが証明されていたｗ</p>

<h2>以下飛び入りLT</h2>

<ul>
<li><p>自分の得分野で入門記事書くと，承認欲求満たされるし，専門家に色々指摘されたりで凄い勉強になるし，良いことしかない！<br />
入門向けに資料作ると自分の知識が整理できます…という点には凄く共感する．</p></li>
<li><p>WordBench新潟の話．初めて知った！参加してみたい！<br />
WORDBENCH新潟：<a href="http://wordbenchniigata.wordpress.com/">http://wordbenchniigata.wordpress.com/</a></p></li>
<li><p>SmartArt（PowerPoint内の機能）の素晴らしさが分かる会．<br />
SkyDriveと組み合わせることでその素晴らしさが無限大になる<br />
普段からOfficeで作成したドキュメント類を見るときはSkyDrive活用しているので凄くよく分かる．<br />
しかしそれでもIEはｒｙ</p></li>
<li><p>NDSがサポートするのでもっと色々な勉強会を発足していこうという話（凄く見覚えがある）．<br />
色々な勉強会を傘下に置く，プロジェクト・アンブレラｗ<br />
合言葉は「それNDSでできるよ！（SRNDS）」</p></li>
</ul>


<h1>全体的な感想</h1>

<p>普段GUI環境でgitを触ることがないのでとても新鮮な会だった．<br />
また今回はLTも多く，面白い話が色々聞けて良かった．<br />
そろそろ何かネタを仕込んで発表したいところだけどもどうしようかなと考え中．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime上からプロジェクトをGithubにpushするまで]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/05/1/"/>
    <updated>2013-07-05T04:34:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/05/1</id>
    <content type="html"><![CDATA[<p>SublimeのGitプラグイン（sublime-text-2-git）を利用して，Sublime内からプロジェクトをGithubにpushするまでをまとめます．<br />
リモートリポジトリとのやりとりあたりで手間取ったのでメモ代わりに．<br />
なお，プロジェクト格納用のリポジトリは既にGithub上に用意されており，かつ公開鍵の登録等も終わっているものとします．</p>

<!-- more -->


<h1>SublimeにGit用のプラグインを導入</h1>

<p><code>cmd+Shift+p</code>でコマンドパレットを開き，<code>Package Control: Install Package</code>→<code>Git</code>と選択し，Gitプラグインを導入．<br />
Githubリポジトリはリンク先参照：<a href="https://github.com/kemayo/sublime-text-2-git">sublime-text-2-git</a></p>

<h1>Sublime上からプロジェクトをGithubにpushするまで</h1>

<p>Sublime用のGitプラグインは非常によくできたプラグインで，Git操作に慣れた者であれば直感的に利用できる． <br />
ここでは細かい説明は避け，README.mdファイルをリポジトリにpushするまでをまとめる．</p>

<ul>
<li>コマンドパレットから<code>Git: Init</code>を選択し，initするGit directoryを入力する．ディレクトリは先に作成しておく必要がある．</li>
<li>README.mdファイルを作成する．</li>
<li>コマンドパレットから<code>Git: Add...</code>を選択し，README.mdファイルを選択する．</li>
<li>コマンドパレットから<code>Git: Commit</code>を選択する．するとCommit Messageの入力を求められるので，入力して終了する（入力が完了すると以下のようなメッセージが出力されるはず）．</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[master (root-commit) 55b8e17] Initial Commit
</span><span class='line'> 0 files changed, 0 insertions(+), 0 deletions(-)
</span><span class='line'> create mode 100644 README.md</span></code></pre></td></tr></table></div></figure>


<ul>
<li>push先のリポジトリを指定する．プラグインには<code>Git: Remote add</code>的なコマンドは存在しないので，カスタムコマンドを利用する．<code>Git: Custom Command</code>を選択し，以下のように入力．</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote add branch名 https://あなたのアカウント:パスワード@github.com/あなたのアカウント/push先のリポジトリ.git
</span><span class='line'>e.g. remote add origin https://amacbee:password@github.com/amacbee/test4sublime.git</span></code></pre></td></tr></table></div></figure>


<ul>
<li>コマンドパレットから<code>Git: Push Current Branch</code>でリポジトリにpush出来る（うまくpush出来れば以下の様なメッセージが出力されるはず）．</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>To https://amacbee:password@github.com/amacbee/test4sublime.git
</span><span class='line'> * [new branch]      master -&gt; master</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ．pushするたびにPasswrodが生のまま表示されたり色々と問題もある^^;<br />
しかし現状ではpushコマンドを入力した際にアカウント名やパスワードの入力を求める画面が表示されないため，この方法しかない気がする（どなたか良い方法を知っている方がいらっしゃればアドバイス下さい）．<br />
<code>Git: Status</code>を利用して現在の状態を確認したり，<code>Git: log</code>を利用してこれまでの履歴を確認することも可能である．</p>

<p>よし，とりあえず満足！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint 15 Olivia をインストールした話]]></title>
    <link href="http://amacbee.github.io/blog/2013/06/04/1/"/>
    <updated>2013-06-04T17:00:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/06/04/1</id>
    <content type="html"><![CDATA[<p>5月29日に，Linux Mintの最新安定版Linux Mint 15 &ndash; Oliviaがリリースされました．<br />
何でも今回は最も野心的なリリースらしいとのこと．<br />
関連記事：<a href="http://blog.linuxmint-jp.net/?p=193">http://blog.linuxmint-jp.net/?p=193</a></p>

<p>かなり気になったので，この機会にずっと放置し続けてきたLinux Mint 12 Lisaから，Oliviaへとアップグレードしました．<br />
以下はそのまとめです．</p>

<!-- more -->


<h1>Linux Mint 12 からのアップグレード</h1>

<p>Linux Mintはリフレッシュアップグレードなるものを推奨しており，アップグレード方法が他のものとはかなり異なる．簡単にまとめると，「現状の状態をバックアップにて保存 → 最新Ver.を新規にインストール → 状態を復元」という流れで進めて行く．<br />
この手順を大変丁寧にまとめてくださったサイト様があるので，ここではそこへのリンクをはるだけに留めておく．<br />
リンク：<a href="http://blog.lindwurm.biz/2013/05/how-to-upgrade-mint.html">Linux Mintのアップグレード方法</a></p>

<h1>インストール用ISOイメージの準備</h1>

<p>Linux Mint 15のISOイメージは，以下のLinux Mint Japanブログから入手できる．<br />
サイト：<a href="http://blog.linuxmint-jp.net/?p=193">http://blog.linuxmint-jp.net/?p=193</a></p>

<p>Linux Mint 15には，CinnamonとMATEという2種類のVer.がある．<br />
それぞれについては以下のサイトを参照．今回はMATE-32bitを導入する．<br />
リンク：<a href="http://programmer-jobs.blogspot.jp/2012/06/linux-mint-13matecinnamon.html">Linux Mint 13をインストール（MATEとCinnamonの違い）</a></p>

<p>ISOイメージをDVDに焼いて，インストールディスクとした．<br />
※USB bootに関して知りたい方は下方参照．</p>

<h1>Linux Mint 15 のインストール &amp; 状態の復元</h1>

<p>BIOSの設定をDVD bootに設定し，インストールする．</p>

<p>インストールしたら，早速前Ver.の状態の復元を試みる．<br />
復元手順は上記のアップグレード方法の通りでいけたので省略する．</p>

<h1>使ってみての所感</h1>

<p>とにかく見た目が全体的にカッコ良くて，フォントもきれい．<br />
研究室で使うマシンに入れたが，NISもNFSもキチンと動作した．<br />
個人的には大変満足でした！</p>

<p>Cinnamon Ver.をインストールした方の紹介記事もぜひ参考に．<br />
サイト：<a href="http://mumeiyamibito.blogspot.jp/2013/05/linux-mint-15-olivia.html">http://mumeiyamibito.blogspot.jp/2013/05/linux-mint-15-olivia.html</a></p>

<br />


<br />


<br />


<br />


<p>&mdash;&mdash;&mdash;&mdash; 以下ボツの作業 &mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>当初USB bootを目指して頑張っていたが，PCとの相性もあってうまくいかなかった．<br />
折角なので作業記録だけ残しておく．</p>

<p>UNetbootinを利用して，USBにisoイメージを書き込む．<br />
UNetbootin: <a href="http://unetbootin.sourceforge.net/">http://unetbootin.sourceforge.net/</a></p>

<p>ダウンロードしたら実行できるようにPermissionを変更しておくこと(実行には要root権限)．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ chmod 755 unetbootin-linux-583</span></code></pre></td></tr></table></div></figure>


<p>このツールを利用するためにはUSBをFAT32でフォーマットしておく必要がある（他のフォーマットでは利用できなかった）．そこで，以下にその手順をまとめる．<br />
まず以下の通り領域を確保する．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo fdisk /dev/sdb    # 自分のUSBデバイスを指定(あらかじめumountしておく)
</span><span class='line'>[sudo] password for root:
</span><span class='line'>
</span><span class='line'>Command (m for help): p    # 現在の情報を表示
</span><span class='line'>
</span><span class='line'>Disk /dev/sdb: 2020 MB, 2020872192 bytes
</span><span class='line'>9 heads, 24 sectors/track, 18273 cylinders, total 3947016
</span><span class='line'>Units = sectors of 1 * 512 = 512 bytes
</span><span class='line'>Sector size (logical/physical): 512 bytes / 512 bytes
</span><span class='line'>I/O size (minimum/optional): 512 bytes / 512 bytes
</span><span class='line'>Disk identifier: 0x00000000
</span><span class='line'>
</span><span class='line'>   Device Boot    Start        End     Blocks    Id    System
</span><span class='line'>  /dev/sdb1        2048    3947015    1972484     1     Linux
</span><span class='line'>
</span><span class='line'>Command (m for help): d    # パーティションの削除
</span><span class='line'>Selected partition 1
</span><span class='line'>
</span><span class='line'>Command (m for help): n    # 新しいパーティションの作成
</span><span class='line'>Command action
</span><span class='line'>   e   extended
</span><span class='line'>   p   primary partition (1-4)
</span><span class='line'>p    # pを選択
</span><span class='line'>Partition number (1-4, default 1): 1    # 1を入力
</span><span class='line'>First sector (2048-3947015, default 2048):    # そのままEnter(=default)
</span><span class='line'>Using default value 2048
</span><span class='line'>Last sector, +sectors or +size(K, M, G) (2048-3947015, default 3947015):    # そのままEnter(=default)
</span><span class='line'>Using default value 3947015
</span><span class='line'>
</span><span class='line'>Comamnd (m for help): t    # partitoinのタイプを選択
</span><span class='line'>Selected partions 1
</span><span class='line'>Hex code (type L to list codes): c    # W95 FAT32 (LBA) を選択
</span><span class='line'>Changed system type of partition 1 to c (W95 FAT32 (LBA))
</span><span class='line'>
</span><span class='line'>Command (m for help): a    # ブートの可否を切り替える
</span><span class='line'>Partition number (1-4): 1
</span><span class='line'>
</span><span class='line'>Command (m for help): w    # 変更を保存して終了
</span><span class='line'>The partition table has been altered!</span></code></pre></td></tr></table></div></figure>


<p>実際にフォーマットする．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkfs.vfat -v -c -F 32 /dev/sdb1</span></code></pre></td></tr></table></div></figure>


<p>これでFAT32でフォーマットされたデバイスが用意できた．<br />
mountをする際には次のコマンドを参考に．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo mkdir /media/usb
</span><span class='line'>$ sudo mount -t vfat /dev/sdb1 /media/usb</span></code></pre></td></tr></table></div></figure>


<p>手順は以下のサイト様を参考にさせて頂いた．<br />
後はUnetbootinのアイコンをクリックして手順通りにやっていけばわかると思うので説明は割愛する．<br />
リンク：<a href="http://kaede.blog.abk.nu/mkfs_fat32">LinuxにおけるFAT32フォーマットの方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最低限のサーバ監視]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/6/"/>
    <updated>2013-05-27T07:46:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/6</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>先日サーバ設定を一新したのですが，そういえばログの監視をしていなかった．  <br/>
ということで，logwatchでも導入しよう．  <br/>
（logwatchを導入することで，logを整形して1日1回メールで報告してくれる．<code>/etc/cron.daily</code>に<code>0logwatch</code>が追加されてるはず）  <br/></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install logwatch</span></code></pre></td></tr></table></div></figure>


<p>メールを届ける環境が整っているのか確かめたい場合は，以下のコマンドを利用して，試しに自分宛にメールを送ってみて下さい．  <br/></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo logwatch --mailto [自分のメールアドレス]</span></code></pre></td></tr></table></div></figure>


<p>無事に送信できることを確認したら，以下のとおり設定ファイルを編集  <br/>
詳細については，以下のサイトを参照．  <br/>
URL：<a href="http://landisk.kororo.jp/diary/29_logwatch.php">http://landisk.kororo.jp/diary/29_logwatch.php</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo emacs /etc/logwatch/conf/logwatch.conf
</span><span class='line'>    Detail = Med
</span><span class='line'>    MailTo = [自分のメールアドレス]
</span><span class='line'>    Range = yesterday</span></code></pre></td></tr></table></div></figure>


<p>ひとまずこれで．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋に落ちるエディタ - Sublime Text - との関係をリセット]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/5/"/>
    <updated>2013-05-27T07:30:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/5</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>もともとEmacs大好き！な私ですが，ちょっと前から恋に落ちると噂のエディタ &ndash; Sublime Text &ndash; とEmacsの2刀流使い的なことをしていました．  <br/>
Sublime Text凄くカッコ良いしPython and JSONベースでごにょごにょ出来るの素晴らしいし色々な環境構築も楽なのでいずれは移行したい，でも現状は.emacs.d/*の方が設定充実してる…といった感じだったのですが，ここ最近新しい言語／環境を勉強する機会が増え，ここらで本格的にSublimeの設定見なおそう！と思いたち，1から設定をやり直しましたｗ  <br/>
以下はそのまとめです．  <br/></p>

<p>Sublime Text：<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a>  <br/>
（いつの間にかβ版じゃなくなっている。。。）</p>

<h2>Package Controlを導入</h2>

<p>まず最初にPackage Controlを導入する．これ一つで便利なPackage群をコマンド一発で入れられるようになる．便利．</p>

<ul>
<li><code>View</code> → <code>Show Console</code></li>
<li>以下のコードを入力</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span><span class="o">=</span><span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">()));</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ipp</span><span class="p">,</span><span class="n">pf</span><span class="p">),</span><span class="s">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="s">&#39;http://sublime.wbond.net/&#39;</span><span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span> <span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Please restart Sublime Text to finish installation</code> が表示されるので，リスタート</li>
</ul>


<h2>Emacsキーバインドの設定</h2>

<p>Sublemacsproを導入．この一連の流れ簡単すぎて感激←</p>

<ul>
<li><code>cmd-Shift-p</code>でコマンドパレットを開き，<code>Package Control: Install Package</code>を選択</li>
<li><code>sublemacspro</code>を選択（emacsで検索すると候補にあがる！）</li>
</ul>


<h2>ユーザ設定ファイルを編集</h2>

<p><code>cmd-,</code>でユーザ設定ファイルを開き，これを編集する（JSON形式）．</p>

<h3>環境変数設定</h3>

<p><code>echo $PATH</code>で出力されるPATHを貼り付け．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;build_env&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;PATH&quot;</span><span class="p">:</span> <span class="s2">&quot;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/texbin&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>フォント設定</h3>

<p>プログラミング時に使うフォントとして，Rictyを指定．  <br/>
（Ricty自体の導入方法については延べません＞＜興味のある方はリンク先を参照：<a href="http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html%EF%BC%89">http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html%EF%BC%89</a>  <br/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;font_face&quot;</span><span class="p">:</span> <span class="s2">&quot;Ricty&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;font_size&quot;</span><span class="p">:</span> <span class="mf">14.0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>その他細かい設定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;highlight_line&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>     <span class="err">//</span> <span class="err">選択行のハイライト</span>
</span><span class='line'>    <span class="nt">&quot;translate_tabs_to_spaces&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>    <span class="err">//</span> <span class="err">tabをspaceに変換</span>
</span><span class='line'>    <span class="nt">&quot;ignored_packages&quot;</span><span class="p">:</span>     <span class="err">//</span> <span class="err">viの設定はいらない</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;Vintage&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TeX環境の構築</h2>

<p>論文を書いてる暇つぶｒｙ…に環境構築などやっているので，一番最初にTeX環境を整えてみた＼(^o^)／ｗ  <br/>
SublimeのTeX環境としてはLaTeXToolsが一般的．</p>

<ul>
<li><code>cmd+Shift+p</code> → <code>Package Control: Install Package</code> → <code>LaTeXTools</code></li>
<li><code>LaTeXTools/LaTeX.sublime-build</code>を開く</li>
<li>以下の通りに編集（Macについての記述は34行目付近）</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;latexmk&quot;</span><span class="p">,</span> <span class="s2">&quot;-cd&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;-e&quot;</span><span class="p">,</span> <span class="s2">&quot;\\$pdflatex = &#39;pdflatex %O -interaction=nonstopmode -synctex=1 %S&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">//</span><span class="s2">&quot;-silent&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;-f&quot;</span><span class="p">,</span> <span class="s2">&quot;-pdf&quot;</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>↓↓↓</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cmd&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;latexmk&quot;</span><span class="p">,</span> <span class="s2">&quot;-cd&quot;</span><span class="p">,</span> <span class="s2">&quot;-f&quot;</span><span class="p">,</span> <span class="s2">&quot;-pv&quot;</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上で設定終了．<code>cmd+b</code>でbuildできる．</p>

<p>ここらで力尽きたので，その他の設定はまた後ほど．  <br/>
ちなみに各種プラグインの情報については，以下のサイトがおすすめ．  <br/>
<a href="http://powerful-code.com/blog/2012/11/plugins-for-st2/">http://powerful-code.com/blog/2012/11/plugins-for-st2/</a>  <br/>
<a href="http://blog.hifumi.info/mac/sublime-text-2-for-mac/">http://blog.hifumi.info/mac/sublime-text-2-for-mac/</a></p>

<p>…Octpressめちゃくちゃ気になってるんだよな．  <br/>
そのうち移行するかもです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python環境 for 集合知プログラミング]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/4/"/>
    <updated>2013-05-27T07:21:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/4</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>常日頃からデータマイニングを勉強したいという方にはO&#8217;REILLYの「集合知プログラミング」をオススメしていた私ですが，色々あってこの本を参考書にデータマイニング勉強会を開くことになりました．  <br/>
この本はPythonをベースとして書かれているのですが，勉強会向けにVPS上にPython環境 for 集合知プログラミングを構築しましたのでまとめます．  <br/>
必要ライブラリのリストは，「付録A サードパーティによるライブラリたち」を参考にしました（導入にはpipを利用しています）．</p>

<h2>Python 2.7.x の導入</h2>

<p>CentOS 6.3に2.7系を導入する（標準は2.6系）．</p>

<p>インストールに必要なものたちを導入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install zlib zlib-devel tk-devel tcl-devel sqlite-devel ncurses-devel gdbm-devel readline-devel bzip2-devel db4-devel openssl-devel</span></code></pre></td></tr></table></div></figure>


<p>Pythonをダウンロードして解凍</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://www.python.org/ftp/python/2.7/Python-2.7.tgz
</span><span class='line'>$ tar xzvf Python-2.7.tgz</span></code></pre></td></tr></table></div></figure>


<p>インストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./configure --with-threads --enable-shared --prefix=/usr/local
</span><span class='line'>$ make
</span><span class='line'>$ sudo make install</span></code></pre></td></tr></table></div></figure>


<p>これでOK！  <br/>
正常にインストールされているかどうかは以下のコマンドで確認できる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ python -V
</span><span class='line'>Python 2.7.2</span></code></pre></td></tr></table></div></figure>


<p>ここでもし下記のメッセージ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>が表示された場合は，.bashrcなどに<code>LD_LIBRARY_PATH</code>を追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
</span><span class='line'>$ source .bashrc</span></code></pre></td></tr></table></div></figure>


<h2>Pythonパッケージ管理システムの導入</h2>

<p>easy_installおよびpipを導入．  <br/>
setuptoolsではなくdistributeから入れます．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget http://python-distribute.org/distribute_setup.py
</span><span class='line'>$ sudo /usr/local/bin/python2.7 distribute_setup.py
</span><span class='line'>$ sudo easy_install pip</span></code></pre></td></tr></table></div></figure>


<h2>必要ライブラリの導入</h2>

<p>導入したライブラリ群は以下のコマンドで確かめられる．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip freeze</span></code></pre></td></tr></table></div></figure>


<h3>A.1 Universal Feed Parser</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install feedparser</span></code></pre></td></tr></table></div></figure>


<h3>A.2 PIL（Python Image Library）</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install pil</span></code></pre></td></tr></table></div></figure>


<h3>A.3 Beautiful Soup</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install beautifulsoup</span></code></pre></td></tr></table></div></figure>


<h3>A4 pysqlite</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install pysqlite</span></code></pre></td></tr></table></div></figure>


<p>※標準で入っているsqlite3でも良いと思います．</p>

<h3>A.5 Numpy（ついでにScipy）</h3>

<p>NumPyおよびSciPyを導入するために，以下の3つを導入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install gcc-gfortran
</span><span class='line'>$ sudo yum install blas-devel
</span><span class='line'>$ sudo yum install lapack-devel</span></code></pre></td></tr></table></div></figure>


<p>NumPyおよびSciPyのインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install numpy
</span><span class='line'>$ sudo pip install scipy</span></code></pre></td></tr></table></div></figure>


<h3>A.6 matplotlib</h3>

<p>matplotlibを導入するために，以下を導入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo yum install libpng-devel</span></code></pre></td></tr></table></div></figure>


<p>matplotlibのインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install matplotlib</span></code></pre></td></tr></table></div></figure>


<h3>A.7 pydelicious</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo pip install pydelicious</span></code></pre></td></tr></table></div></figure>


<p>以上で環境構築は終了（だと思われます）！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cent OS 6.3にexFATをmountした話]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/3/"/>
    <updated>2013-05-27T07:13:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/3</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>諸事情により，Cent OS 6.3にexFATでフォーマットされたUSBをmountしてみましたのでそのまとめ（exFATはdefaultではサポートされていない）．  <br/>
参考にしたページ：<a href="http://yowatari.hatenablog.com/entry/2012/08/29/200325">CentOS6.3でexFATをマウントする</a></p>

<p>まずは必要ライブラリを先にinstall．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ yum install auto-buildrequires fuse-devel scons gcc rpm-build</span></code></pre></td></tr></table></div></figure>


<p>次に<a href="https://code.google.com/p/exfat/">ココ</a>から<code>exfat-utils</code>および<code>fuse-exfat</code>をdownloadしてくる．
ちなみに今回導入したVer.は以下の通り．</p>

<ul>
<li>exfat-utils-1.0.1.tar.gz</li>
<li>fuse-exfat-1.0.1.tar.gz</li>
</ul>


<p>downloadしたフォルダを展開し，それぞれのフォルダにて以下のコマンドを実行（詳細はREADMEを参照）．</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ scons
</span><span class='line'>$ sudo scons install</span></code></pre></td></tr></table></div></figure>


<p>これでmountの準備ができた．</p>

<p>実際にmountしてみる．  <br/>
今回は，<code>/mnt/usb</code>というフォルダを作成し，そこへのmountを試みる．なお，USBに割り当てられたデバイス名は事前に確認しておく（dmesgコマンド等を活用して下さい）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mount -t exfat /dev/sdb1 /mnt/usb</span></code></pre></td></tr></table></div></figure>


<p>成功していれば，<code>FUSE exfat 1.0.1</code>のようなメッセージが出る．</p>

<p>これで無事にmountできました．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソーシャルグラフに関するあれやこれや]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/2/"/>
    <updated>2013-05-27T07:01:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/2</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>Facebook Graph APIに関してざっと学んだことをまとめます．  <br/>
参考にしたページ：<a href="http://d.hatena.ne.jp/language_and_engineering/20111006/p1">http://d.hatena.ne.jp/language_and_engineering/20111006/p1</a></p>

<h2>Facebook Graph API</h2>

<ul>
<li>グラフ上の全てのオブジェクトに固有IDがふられる</li>
<li><code>https://graph.facebook.com/ID</code>にリクエストすることで，オブジェクトの持つ要素へアクセスできる</li>
<li>レスポンスはすべてJSON形式</li>
<li><code>https://graph.facebook.com/ID/CONNECTION_TYPE</code>で，オブジェクト感のコネクション（関連性）を確かめることができる</li>
</ul>


<p>またFacebook Query Language（FQL）も使うことができる（<a href="http://developers.facebook.com/docs/reference/fql/">参考</a>）．  <br/>
かなり便利そう．</p>

<h2>APIのURL一覧</h2>

<p>必要そうなものは以下の二つかな？  <br/>
Graph API：<a href="http://developers.facebook.com/docs/reference/api/">http://developers.facebook.com/docs/reference/api/</a></p>

<h3>ユーザ情報</h3>

<p>Request URI：<code>https://graph.facebook.com/***</code>  <br/>
参考：<a href="http://developers.facebook.com/docs/reference/api/user/">http://developers.facebook.com/docs/reference/api/user/</a></p>

<p>※自分の情報にアクセスしたい場合は，<code>/me</code>  <br/>
※他人のe-mail情報は取得できない</p>

<h3>ページのウォールに投稿されたコメント一覧</h3>

<p>Request URI：<code>https://graph.facebook.com/***/feed</code>  <br/>
参考：<a href="http://developers.facebook.com/docs/reference/api/post/">http://developers.facebook.com/docs/reference/api/post/</a></p>

<p>※画像の取得に関しては，SDKを通す必要がない</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebookアプリ事始め]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/1/"/>
    <updated>2013-05-27T06:38:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/1</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>大変ごぶざたしておりました＼(^o^)／  <br/>
早くも飽きグセが出てヤバい感じです．</p>

<p>飲んだ勢いからFacebookページの解析が出来ないかという話題になり，完全なる勢いでFacebookアプリの開発を始めましたのでまとめます．参考にしたページは<a href="http://pr.zero-start.jp/archives/65560685.html">こちら</a>．</p>

<p>詳細は参考ページに大変詳しく書かれておりますので，こちらにはざっとした流れのみを書いておきます．  <br/>
GoogleAppEngine+Python．</p>

<h2>1st step. Google App Engine</h2>

<ol>
<li>Google App Engineアカウントの作成．<a href="http://code.google.com/intl/ja/appengine/">コチラ</a>からどうぞ．</li>
<li><code>Create Application</code> → 必要情報の入力（アプリ名とURLは後で使うのでメモっておく）</li>
<li>Application Registered Successfullyでおｋ．</li>
<li>Google App Engine Launcherのインストール．downloadは<a href="http://code.google.com/intl/ja/appengine/downloads.html">コチラ</a>からどうぞ．</li>
<li>Launcherを立ち上げる（Symlink関係はOKで ← 適当）．</li>
</ol>


<h2>2nd step. Facebook Developers</h2>

<ol>
<li>Facebook Developersに登録．<a href="http://developers.facebook.com/">コチラ</a>からどうぞ．</li>
<li><code>Apps</code> → <code>新しいアプリを作成</code> → 必要情報の入力．</li>
<li><code>基本設定</code> → <code>Facebookでログインするウェブサイト</code> → 先ほどGoogle App Engineで登録したApplicationのURL．  <br/>
E.g. <a href="http://****.appspot.com/">http://****.appspot.com/</a></li>
<li>App IDとApp Secretをメモっておく．</li>
</ol>


<h2>3rd step. facebook-sdk (Python)</h2>

<ol>
<li>Githubからfacebook-sdk（Python）を入手＆解凍．コチラからどうぞ．</li>
<li>PC上のお好きな場所にアプリ名と同様のフォルダを作成．</li>
<li>facebook-sdk中から，facebook.pyおよびexamples/appengine/の中身全てをフォルダに移動．</li>
<li>app.yaml中のapplication名を当該アプリ名に変更 → 保存．  <br/>
E.g. application: *****</li>
<li>example.pyの<code>FACEBOOK_APP_ID</code>および，<code>FACEBOOK_APP_SECRET</code>を変更 → 保存．</li>
</ol>


<h2>4th step. Deploy</h2>

<ol>
<li>GoogleAppEngineLauncherから<code>File</code> → <code>Add Existing Application</code> → 作成したフォルダを選択</li>
<li><code>Deploy</code> → 必要情報を入力 → ログイン！</li>
<li>exist code 0で成功</li>
<li>登録したアプリサイトにとぶ</li>
<li>ログインボタンがあるはず（成功！）</li>
</ol>


<p>あとはexample.pyやexample.htmlをいじっていけばいいよう．  <br/>
とりあえずスタートライン:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages+OctopressでBlog作成]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/26/1/"/>
    <updated>2013-05-26T07:49:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/26/1</id>
    <content type="html"><![CDATA[<p>BloggerからGithub Pages+Octopressに乗り換えたのでそのまとめ．  <br/>
テスト投稿も兼ねてます．</p>

<p>Github Pages: <a href="http://pages.github.com/">http://pages.github.com/</a>  <br/>
Octopress: <a href="http://octopress.org/">http://octopress.org/</a></p>

<!-- more -->


<p>Github Pagesを利用することで，ウェブサイトをGitで管理し，更にはGithubへプッシュすることでウェブサイトを公開できる（細かい話は割愛）．
今回はOctopressというRailsで作られたframeworkを利用し，ローカルで作成したページを自動コミット／プッシュする．  <br/>
詳細についてはリンク先を参照：<a href="http://blog.eiel.info/blog/2013/02/17/github-pages/">http://blog.eiel.info/blog/2013/02/17/github-pages/</a></p>

<h2>ローカル環境</h2>

<p>OS: MacOS X 10.7</p>

<h2>環境構築手順</h2>

<h3>Github Repoの用意</h3>

<p>Github pagesを利用するために，Githubに<code>username.github.com</code>という名前でリポジトリを作成する（今回は，amacbee.github.com）．</p>

<h3>Ruby環境のセットアップ</h3>

<p>Macにおけるrubyのデフォルトは1.8.*だが，Octopress導入には1.9.3p194が必要となる(2013年5月現在)．
そこでVersion管理ツールrbenvを利用して，ruby環境を構築する．</p>

<p>まずはrbenvの導入．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ brew install rbenv
</span><span class='line'>$ brew install ruby-build
</span></code></pre></td></tr></table></div></figure>


<p>.zshrcに以下を記述．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># rbenv setting</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.rbenv/bin:$PATH&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>rbenvのPATHを追加したら，以下の通りインストールして設定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rbenv install 1.9.3-p194
</span><span class='line'>$ rbenv rehash
</span><span class='line'>$ rbenv global 1.9.3-p194
</span></code></pre></td></tr></table></div></figure>


<p>次にパッケージ（Gem）管理ツールであるbundleのインストール．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ gem install bundler
</span></code></pre></td></tr></table></div></figure>


<p>これでOctopressを導入するためのRuby環境構築はひとまず終了．</p>

<h3>Octopressの導入</h3>

<p>適当なディレクトリにOctopressをcloneしてインストール．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ cd ~/Documents/
</span><span class='line'>$ git clone https://github.com/imathis/octopress.git
</span><span class='line'>$ cd octopress
</span><span class='line'>$ bundle install
</span><span class='line'>$ rake install
</span></code></pre></td></tr></table></div></figure>


<p>これでOctopressが導入できた．  <br/>
正しく導入できたかを確認するために，以下のコマンドを実行する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake generate
</span><span class='line'>$ rake preview
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://localhost:4000">http://localhost:4000</a> を参照し，正しく導入できているかを確認する．</p>

<p>正しく導入できていた事を確認したら，デプロイする．
以下のコマンドを実行し，デプロイ先のリポジトリとして<code>git@github.com:amacbee/amacbee.github.com.git</code>を指定する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>これで指定したリポジトリのmasterに生成したファイルがcommitされた．
以下のコマンドを実行することで，push → デプロイされる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>後述するSublime Textを利用することで，デプロイ処理はエディタ内で行うことができる．</p>

<p>力尽きたので投稿方法や各種設定等については割愛．</p>

<h2>「Sublime Text 2 Octopress」の導入</h2>

<p>OctopressをSublimeから利用するために環境を構築する．幸いなことに専用Packageが既に用意されていたため，Package Contorolから&#8221;Octopress&#8221;を導入（Package Contorolについては別記事参照）．  <br/>
このPackageに関する情報についてはリンク先を参照：<a href="https://github.com/blueplanet/sublime-text-2-octopress">https://github.com/blueplanet/sublime-text-2-octopress</a></p>

<p>READMEに従って，設定を以下の通りに書き換えた．  <br/>
Sublime Text 2 &ndash;> Preference &ndash;> Package Settings &ndash;> Octopress &ndash;> Setting &ndash; User</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">//</span> <span class="err">path</span> <span class="err">to</span> <span class="err">your</span> <span class="err">octopress</span>
</span><span class='line'>  <span class="nt">&quot;octopress_path&quot;</span><span class="p">:</span> <span class="s2">&quot;~/Documents/octopress&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">the</span> <span class="err">shell</span> <span class="err">to</span> <span class="err">run</span> <span class="err">commands</span> <span class="err">with</span>
</span><span class='line'>  <span class="nt">&quot;octopress_shell_executable&quot;</span><span class="p">:</span> <span class="s2">&quot;/bin/zsh&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">command</span> <span class="err">to</span> <span class="err">run</span> <span class="err">before</span> <span class="err">calling</span> <span class="err">rake,</span> <span class="err">eg</span> <span class="err">source</span> <span class="err">~/bash_profile</span> <span class="err">to</span> <span class="err">set</span> <span class="err">up</span> <span class="err">your</span> <span class="err">local</span> <span class="err">environment</span> <span class="err">inc</span> <span class="err">paths</span> <span class="err">to</span> <span class="err">ruby,</span> <span class="err">rake</span> <span class="err">etc.</span>
</span><span class='line'>  <span class="nt">&quot;octopress_cmd_before_rake&quot;</span> <span class="p">:</span> <span class="s2">&quot;source ~/.zshrc&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">set</span> <span class="err">to</span> <span class="err">generate,</span> <span class="err">deploy</span> <span class="err">or</span> <span class="err">generate_and_deploy</span> <span class="err">if</span> <span class="err">you</span> <span class="err">wish</span> <span class="err">to</span> <span class="err">have</span> <span class="err">your</span> <span class="err">changes</span> <span class="err">generated</span> <span class="err">into</span> <span class="err">the</span> <span class="err">/public</span> <span class="err">folder</span> <span class="err">and/or</span> <span class="err">deployed</span> <span class="err">upon</span> <span class="err">file</span> <span class="err">save</span>
</span><span class='line'>  <span class="nt">&quot;octopress_onsave_action&quot;</span><span class="p">:</span> <span class="s2">&quot;generate&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">set</span> <span class="err">to</span> <span class="err">the</span> <span class="err">extension</span> <span class="err">of</span> <span class="err">all</span> <span class="err">new</span> <span class="err">pages.</span> <span class="err">This</span> <span class="err">should</span> <span class="err">be</span> <span class="err">the</span> <span class="err">same</span> <span class="err">as</span> <span class="err">in</span> <span class="err">your</span> <span class="err">Rakefile</span> <span class="err">setting</span> <span class="err">for</span> <span class="err">new_page_ext</span>
</span><span class='line'>  <span class="nt">&quot;octopress_page_extension&quot;</span><span class="p">:</span> <span class="s2">&quot;markdown&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">set</span> <span class="err">to</span> <span class="err">the</span> <span class="err">extension</span> <span class="err">of</span> <span class="err">all</span> <span class="err">new</span> <span class="err">posts.</span> <span class="err">This</span> <span class="err">should</span> <span class="err">be</span> <span class="err">the</span> <span class="err">same</span> <span class="err">as</span> <span class="err">in</span> <span class="err">your</span> <span class="err">Rakefile</span> <span class="err">setting</span> <span class="err">for</span> <span class="err">posts_dir</span>
</span><span class='line'>  <span class="nt">&quot;octopress_posts_dir&quot;</span><span class="p">:</span> <span class="s2">&quot;_posts&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">//</span> <span class="err">true</span> <span class="err">or</span> <span class="err">false</span>
</span><span class='line'>  <span class="nt">&quot;use_bundle&quot;</span><span class="p">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし以下のようなエラーが発生．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>error: Octopress exec failed. Please check octopress env, and try again.
</span><span class='line'>You can check exec log in sublime console.
</span></code></pre></td></tr></table></div></figure>


<p><code>cmd+`</code>でConsoleを開き，エラーメッセージを確認してみる．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>YAML Exception reading 2013-05-26-1.markdown: invalid byte sequence in US-ASCII
</span></code></pre></td></tr></table></div></figure>


<p>文字コード周りでおこられているらしい．
そこで公式の「In the case of an error, please see the RVM or Rbenv errors」のページを参照したところ「rbenv」項目に以下の記述を発見した．</p>

<blockquote><p>mine ~/.bashrc looks like:</p>

<p>PATH=&ldquo;$HOME/.rbenv/versions/1.9.3-p194/bin:$PATH&rdquo;  <br/>
cmd_before_rake is source ~/.bashrc &amp;&amp; export LANG=en_US.UTF-8 &amp;&amp; export LC_ALL=en_US.UTF-8  <br/>
but you shall not include &amp;&amp; export LANG=en_US.UTF-8 &amp;&amp; export LC_ALL=en_US.UTF-8 if you write in English</p></blockquote>

<p>対処方に従いlocaleの設定を行う．以下のように設定を書き換えた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">//</span> <span class="err">command</span> <span class="err">to</span> <span class="err">run</span> <span class="err">before</span> <span class="err">calling</span> <span class="err">rake,</span> <span class="err">eg</span> <span class="err">source</span> <span class="err">~/bash_profile</span> <span class="err">to</span> <span class="err">set</span> <span class="err">up</span> <span class="err">your</span> <span class="err">local</span> <span class="err">environment</span> <span class="err">inc</span> <span class="err">paths</span> <span class="err">to</span> <span class="err">ruby,</span> <span class="err">rake</span> <span class="err">etc.</span>
</span><span class='line'>  <span class="nt">&quot;octopress_cmd_before_rake&quot;</span> <span class="p">:</span> <span class="s2">&quot;source ~/.zshrc &amp;&amp; export LANG=ja_JP.UTF-8 &amp;&amp; export LC_ALL=ja_JP.UTF-8&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで無事に動作した．</p>
]]></content>
  </entry>
  
</feed>
