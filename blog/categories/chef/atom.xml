<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | 酒飲みの備忘録]]></title>
  <link href="http://amacbee.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://amacbee.github.io/"/>
  <updated>2014-02-08T03:37:00+09:00</updated>
  <id>http://amacbee.github.io/</id>
  <author>
    <name><![CDATA[a.macbee]]></name>
    <email><![CDATA[a.macbee@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChefにおけるChildConvergeErrorへの対処法]]></title>
    <link href="http://amacbee.github.io/blog/2014/01/07/1/"/>
    <updated>2014-01-07T05:33:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2014/01/07/1</id>
    <content type="html"><![CDATA[<p>ChildConvergeErrorに数時間もハマってしまったので，忘れないうちにメモ．<br/></p>

<!-- more -->


<p>他所さまによって作成されたCookbookを利用して，Virtual環境(hoge)に<code>knife solo cook hoge</code>したら，以下のようなエラーが発生した．</p>

<p><code>
Running Chef on hoge...
Checking Chef version...
Uploading the kitchen...
Generating solo config...
Running Chef...
Starting Chef Client, version 11.6.0
Compiling Cookbooks...
[2014-01-06T20:33:21+00:00] ERROR: Running exception handlers
[2014-01-06T20:33:21+00:00] ERROR: Exception handlers complete
[2014-01-06T20:33:21+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
Chef Client failed. 0 resources updated
[2014-01-06T20:33:21+00:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)
ERROR: RuntimeError: chef-solo failed. See output above.
</code></p>

<p>色々と調べた結果，solo.rbのパス設定が間違っている可能性が高いとのことで，<code>ssh hoge</code>して，solo.rbの内容を調べてみる．<br/></p>

<p>```
base = File.expand_path(&lsquo;..&rsquo;, <strong>FILE</strong>)</p>

<p>nodes_path                File.join(base, &lsquo;nodes&rsquo;)
role_path                 File.join(base, &lsquo;roles&rsquo;)
data_bag_path             File.join(base, &lsquo;data_bags&rsquo;)
encrypted_data_bag_secret File.join(base, &lsquo;data_bag_key&rsquo;)</p>

<p>cookbook_path []
cookbook_path &lt;&lt; File.join(base, &lsquo;cookbooks-1&rsquo;) # cookbooksへのパス
cookbook_path &lt;&lt; File.join(base, &lsquo;cookbooks-2&rsquo;) # site-cookbooksへのパス
cookbook_path &lt;&lt; File.join(base, &lsquo;cookbooks-3&rsquo;) # knife-soloのpatch_cookbooksへのパス
```</p>

<p>うん？特に問題なさそう．<br/>
Virtual環境上で<code>sudo chef-solo -o hoge -l debug</code>して詳細なエラー内容を調べてみたところ，以下のようなメッセージが．</p>

<p><code>
[2014-01-06T20:39:18+00:00] ERROR: Running exception handlers
[2014-01-06T20:39:18+00:00] ERROR: Exception handlers complete
[2014-01-06T20:39:18+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
[2014-01-06T20:39:18+00:00] DEBUG: Chef::Exceptions::CookbookNotFound: Cookbook hoge not found. If you're loading hoge from another cookbook, make sure you configure the dependency in your metadata
</code></p>

<p>うん？？？Cookbook hogeなんて指定した覚えがない(hogeはマシン名)．<br/>
ここで数時間ほど悩み続ける．</p>

<p>色々と試行錯誤した結果，Virtual環境上ではなくローカル環境において<code>knife solo cook -V hoge</code>(verboseオプションを利用)したら解決した．</p>

<p><code>
[2014-01-06T20:45:30+00:00] ERROR: Running exception handlers
[2014-01-06T20:45:30+00:00] ERROR: Exception handlers complete
[2014-01-06T20:45:30+00:00] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
[2014-01-06T20:45:30+00:00] DEBUG: Chef::Exceptions::CookbookNotFound: Cookbook fuga not found. If you're loading fuga from another cookbook, make sure you configure the dependency in your metadata
</code></p>

<p>エ　ラ　ー　メ　ッ　セ　ー　ジ　が　変　わ　っ　た　！(必要なcookbookがhogeからfugaへ)<br/>
メッセージ通り必要なcookbookを導入したら無事に解決しました．</p>

<p>この原因解決になぜ数時間もかかった自分orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[serverspec を利用したテスト駆動環境構築]]></title>
    <link href="http://amacbee.github.io/blog/2013/11/21/1/"/>
    <updated>2013-11-21T07:30:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/11/21/1</id>
    <content type="html"><![CDATA[<p>とある事情からNLPのローカル開発環境を整えることになり，久しぶりにChefで遊んでます．<br/>
今回はVagrant+Chef+serverspecを利用して，日本語形態素解析器MeCab (+ipadic) を利用するための環境をテスト駆動構築するまでをまとめます．</p>

<!-- more -->


<p>形態素解析器 MeCab について詳しく知りたい方は，以下のサイトを参照して下さい．<br/>
本家：<a href="http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html">http://mecab.googlecode.com/svn/trunk/mecab/doc/index.html</a></p>

<h1>前準備</h1>

<ul>
<li><code>vagrant init</code>→Vagrantfileを編集して，nlpという名前のインスタンスを作成．</li>
<li><code>vagrant ssh-config --host nlp &gt;&gt; ~/.ssh/config</code> してnlpでsshできるよう設定．</li>
<li><code>knife solo init nlp-repo</code>して，chef環境の初期化．</li>
<li><code>knife solo prepare nlp</code>して，Vagrantのインスタンスにchef環境を用意．</li>
</ul>


<h1>大まかな流れ</h1>

<ul>
<li>serverspecのテストで必要な機能について記述，VM環境でコケることを確認．</li>
<li>chefでrecipeを書き，VMに適用する．</li>
<li>再びserverspecのテストを走らせ，全てが通ることを確認する．通らない場合は，通るまでchefによる環境構築を続ける．</li>
</ul>


<h1>serverspec の導入</h1>

<p>なにはともあれ，serverspec をローカル環境に導入しなければ始まりません．<br/>
serverspecは，以下のように簡単にセットアップすることが出来ます（実行するディレクトリはどこでも良い？よう．今回は，Vagrantfileが置かれているnlpディレクトリ上で実行した）．<br/>
詳細に関しては本家サイトを参照して下さい．<br/>
本家：<a href="http://serverspec.org/">http://serverspec.org/</a></p>

<p>```sh
$ gem install serverspec
$ serverspec-init
Select OS type:</p>

<p>  1) UN*X
  2) Windows</p>

<p>Select number: 1</p>

<p>Select a backend type:</p>

<p>  1) SSH
  2) Exec (local)</p>

<p>Select number: 1</p>

<p>Vagrant instance y/n: n
Input target host name: nlp
 + spec/
 + spec/nlp/
 + spec/nlp/httpd_spec.rb
 + spec/spec_helper.rb
```</p>

<h1>spec/default/***_spec.rb ファイルの作成／1回目のテスト実行</h1>

<p>spec/default/httpd_spec.rb を見本として，***_spec.rb ファイルを作成していきます．<br/>
早速，以下の通り spec/default/mecab_spec.rb を作成しました（spec/default/httpd_spec.rb は削除してしまって問題ありません）．</p>

<p>```ruby
require &lsquo;spec_helper&rsquo;</p>

<p>describe file(&lsquo;/usr/local/bin/mecab&rsquo;) do
  it { should be_file }
  it { should be_executable }
end</p>

<p>describe file(&lsquo;/usr/local/lib/mecab/dic/ipadic/&rsquo;) do
  it { should be_directory }
end
```</p>

<p>ここまで出来たら，以下のコマンドを実行してテストがfailすることを確認します．</p>

<p>```sh
$ rake spec
(in /path/to/nlp)
/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
FFF</p>

<p>Failures:</p>

<p>  1) File &ldquo;/usr/local/bin/mecab&rdquo; should be file</p>

<pre><code> Failure/Error: it { should be_file }
   sudo test -f /usr/local/bin/mecab
   expected file? to return true, got false
 # ./spec/nlp/mecab_spec.rb:4:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>  2) File &ldquo;/usr/local/bin/mecab&rdquo; should be executable</p>

<pre><code> Failure/Error: it { should be_executable }
   sudo stat -c %a /usr/local/bin/mecab
   stat: cannot stat `/usr/local/bin/mecab': そのようなファイルやディレクトリはありません
   expected File "/usr/local/bin/mecab" to be executable
 # ./spec/nlp/mecab_spec.rb:5:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>  3) File &ldquo;/usr/local/lib/mecab/dic/ipadic/&rdquo; should be directory</p>

<pre><code> Failure/Error: it { should be_directory }
   sudo test -f /usr/local/lib/mecab/dic/ipadic/
   expected file? to return true, got false
 # ./spec/nlp/mecab_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.3636 seconds
3 examples, 3 failures</p>

<p>Failed examples:</p>

<p>rspec ./spec/nlp/mecab_spec.rb:4 # File &ldquo;/usr/local/bin/mecab&rdquo; should be file
rspec ./spec/nlp/mecab_spec.rb:5 # File &ldquo;/usr/local/bin/mecab&rdquo; should be executable
rspec ./spec/nlp/mecab_spec.rb:9 # File &ldquo;/usr/local/lib/mecab/dic/ipadic/&rdquo; should be directory
/path/to/ruby -S rspec spec/nlp/mecab_spec.rb failed
```</p>

<h1>mecab本体用のrecipeを作成＆VM環境にインストール</h1>

<p>chefのmecab用recipeを作成します．<br/>
書き方はリンクを参考：<a href="http://docs.opscode.com/resource_script.html">http://docs.opscode.com/resource_script.html</a></p>

<p>```ruby
version = node[&ldquo;mecab&rdquo;][&ldquo;version&rdquo;]</p>

<p>remote_file &ldquo;#{Chef::Config[:file_cache_path]}/mecab-#{version}.tar.gz&rdquo; do
  source &ldquo;<a href="http://mecab.googlecode.com/files/mecab-#">http://mecab.googlecode.com/files/mecab-#</a>{version}.tar.gz&rdquo;
  checksum node[&lsquo;mecab&rsquo;][&lsquo;checksum&rsquo;]
  mode &ldquo;0644&rdquo;
  not_if { ::File.exists?(&ldquo;/usr/local/bin/mecab&rdquo;) }
end</p>

<p>bash &ldquo;build_and_install_mecab&rdquo; do
  user &ldquo;root&rdquo;
  cwd Chef::Config[:file_cache_path]
  code &lt;&lt;-EOH</p>

<pre><code>tar -zxf mecab-#{version}.tar.gz
(cd mecab-#{version} &amp;&amp; ./configure #{node["mecab"]["configure_options"]})
(cd mecab-#{version} &amp;&amp; make &amp;&amp; make check &amp;&amp; make install)
</code></pre>

<p>  EOH
  not_if { ::File.exists?(&ldquo;/usr/local/bin/mecab&rdquo;) }
end
```</p>

<p>今回，attribute/default.rbは以下の通り設定しました．</p>

<p><code>ruby
default["mecab"]["version"] = "0.996"
default["mecab"]["checksum"] = "15baca0983a61c1a49cffd4a919463a0a39ef127"
default["mecab"]["configure_options"] = "--with-charset=utf8 --enable-utf8-only"
</code></p>

<p>書き終わったら，run_listにrecipe[mecab]を加え，以下のようにVM環境にrecipeをインストールします．</p>

<p>```sh
$ knife solo cook nlp
Running Chef on nlp&hellip;
Checking Chef version&hellip;
Uploading the kitchen&hellip;
Generating solo config&hellip;
Running Chef&hellip;
Starting Chef Client, version 11.6.0
Compiling Cookbooks&hellip;
Converging 2 resources
Recipe: mecab::default
  * remote_file[/var/chef/cache/mecab-0.996.tar.gz] action create</p>

<pre><code>- create new file /var/chef/cache/mecab-0.996.tar.gz
- update content in file /var/chef/cache/mecab-0.996.tar.gz from none to e07332
    (new content is binary, diff output suppressed)
- change mode from '' to '0644'
</code></pre>

<ul>
<li>bash[build_and_install_mecab] action run

<ul>
<li>execute &ldquo;bash&rdquo;  &ldquo;/tmp/chef-script20131127-3321-1d0z02u&rdquo;</li>
</ul>
</li>
</ul>


<p>Chef Client finished, 2 resources updated
```</p>

<p>mecabは正しくインストールされたようです．</p>

<h1>2回目のテスト実行</h1>

<p>ここまで出来たところで，serverspecのテストをもう1度実行してみます．</p>

<p>```sh
$ rake spec
(in /path/to/nlp)
/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
..F</p>

<p>Failures:</p>

<p>  1) File &ldquo;/usr/local/lib/mecab/dic/ipadic/&rdquo; should be directory</p>

<pre><code> Failure/Error: it { should be_directory }
   sudo test -f /usr/local/lib/mecab/dic/ipadic/
   expected file? to return true, got false
 # ./spec/nlp-default/mecab_spec.rb:9:in `block (2 levels) in &lt;top (required)&gt;'
</code></pre>

<p>Finished in 0.25173 seconds
3 examples, 1 failure</p>

<p>Failed examples:</p>

<p>rspec ./spec/nlp/mecab_spec.rb:9 # File &ldquo;/usr/local/lib/mecab/dic/ipadic/&rdquo; should be directory
/path/to/ruby -S rspec spec/nlp/mecab_spec.rb failed
```</p>

<p>先ほどと結果が変わっていることが分かります．<br/>
mecab本体用のテストは無事に通ったようです．</p>

<h1>mecab用辞書(mecab-ipadic)のrecipeを作成＆VM環境にインストール</h1>

<p>mecab用辞書をインストールするために，recipe/default.rbに以下の内容を書き加えます．</p>

<p>```ruby
version = node[&ldquo;ipadic&rdquo;][&ldquo;version&rdquo;]
remote_file &ldquo;#{Chef::Config[:file_cache_path]}/mecab-ipadic-#{version}.tar.gz&rdquo; do
  source &ldquo;<a href="https://mecab.googlecode.com/files/mecab-ipadic-#">https://mecab.googlecode.com/files/mecab-ipadic-#</a>{version}.tar.gz&rdquo;
  checksum node[&lsquo;ipadic&rsquo;][&lsquo;checksum&rsquo;]
  mode &ldquo;0644&rdquo;
  not_if { ::File.exists?(&ldquo;/usr/local/lib/mecab/dic/ipadic&rdquo;) }
end</p>

<p>bash &ldquo;build_and_install_ipadic&rdquo; do
  user &ldquo;root&rdquo;
  cwd Chef::Config[:file_cache_path]
  code &lt;&lt;-EOH</p>

<pre><code>tar -zxf mecab-ipadic-#{version}.tar.gz
(cd mecab-ipadic-#{version} &amp;&amp; ./configure #{node["mecab"]["configure_options"]})
(cd mecab-ipadic-#{version} &amp;&amp; /usr/local/libexec/mecab/mecab-dict-index -f euc-jp -t utf-8)
(cd mecab-ipadic-#{version} &amp;&amp; make install)
</code></pre>

<p>  EOH
  not_if { ::File.exists?(&ldquo;/usr/local/lib/mecab/dic/ipadic&rdquo;) }
end
```</p>

<p>attribute は以下の通り設定しました．</p>

<p><code>ruby
default["ipadic"]["version"] = "2.7.0-20070801"
default["ipadic"]["checksum"] = "0d9d021853ba4bb4adfa782ea450e55bfe1a229b"
default["ipadic"]["configure_options"] = "--with-charset=utf8 --enable-utf8-only"
</code></p>

<p>書き終わったら，knifeコマンドをもう一度実行します．</p>

<p>```sh
Running Chef on nlp&hellip;
Checking Chef version&hellip;
Uploading the kitchen&hellip;
Generating solo config&hellip;
Running Chef&hellip;
Starting Chef Client, version 11.6.0
Compiling Cookbooks&hellip;
Converging 4 resources
Recipe: mecab::default
  * remote_file[/var/chef/cache/mecab-0.996.tar.gz] action create (skipped due to not_if)
  * bash[build_and_install_mecab] action run (skipped due to not_if)
  * remote_file[/var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz] action create</p>

<pre><code>- create new file /var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz
- update content in file /var/chef/cache/mecab-ipadic-2.7.0-20070801.tar.gz from none to b62f52
    (file sizes exceed 10000000 bytes, diff output suppressed)
- change mode from '' to '0644'
</code></pre>

<ul>
<li>bash[build_and_install_ipadic] action run

<ul>
<li>execute &ldquo;bash&rdquo;  &ldquo;/tmp/chef-script20131127-8352-omxnss&rdquo;</li>
</ul>
</li>
</ul>


<p>Chef Client finished, 2 resources updated
```</p>

<p>mecab-ipadicは正しくインストールされたようです．</p>

<h1>3回目のテスト実行</h1>

<p>ここまで出来たところで，serverspecのテストをもう1度実行してみます．</p>

<p>```sh
(in /path/to/nlp)
/path/to/ruby -S rspec spec/nlp/mecab_spec.rb
&hellip;</p>

<p>Finished in 0.34858 seconds
3 examples, 0 failures
```</p>

<p>ようやくMeCabの導入に成功しました！</p>

<h1>まとめ</h1>

<p>上記のように，CaboChaなんかも入れていこうと思ってます．<br/>
すべて導入し終わったら，Githubに公開予定です！<br/>
（気力があれば）ブログにもまとめます．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef+BerkshelfでISUCON環境の構築]]></title>
    <link href="http://amacbee.github.io/blog/2013/10/03/1/"/>
    <updated>2013-10-03T04:15:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/10/03/1</id>
    <content type="html"><![CDATA[<p>週末のISUCONに向け，VM上にChef+Berkshelfで過去大会の環境を構築して色々と試してます．<br/>
可能な限り楽をして環境を用意がメインテーマです．<br/>
折角なので，その環境構築方法を一部紹介．</p>

<!-- more -->


<h1>事前準備</h1>

<p><a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>で作成した<code>centos6.4</code>のboxを利用して，ISUCONテスト環境用の環境を構築する．<br/>
以下のとおり実行．</p>

<p><code>
$ vagrant init centos-6.4
$ vagrant up
$ vagrant ssh-config --host isucon &gt;&gt; ~/.ssh/config
</code></p>

<p>次に，Chefのレポジトリを作成し，ホストにChefをインストールする．<br/>
※コマンドの詳細に関しては，<a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>を参照．</p>

<p><code>
$ knife solo init chef-repo
$ cd chef-repo
$ git init
$ git add .
$ git commit -m "Initial commit"
$ knife solo prepare vagrant@isucon
</code></p>

<h1>Berkshelfの設定</h1>

<p>他の人が作ったCookbookを利用するために，Cookbook管理ツールである<a href="http://berkshelf.com/">Berkshelf</a>を導入する．<br/></p>

<p><code>
$ gem install berkshelf
$ rbenv rehash
</code></p>

<h1>ISUCON2環境の構築</h1>

<p>準備ができたところで，実際にISUCONの環境を構築していく．
今回は，例としてISUCON2の環境を構築してみる(使用する言語はruby)．
詳細は下記サイトを参照．<br/>
サイト：<a href="http://blog.livedoor.jp/techblog/archives/67728751.html">自家製 #isucon2 のつくりかた</a></p>

<p>まず，利用できる既存のCookbookを導入する．<br/>
chef-repo内に<code>Berksfile</code>を作成し，以下の内容で保存する．<br/></p>

<p>```
site :opscode</p>

<p>cookbook &lsquo;git&rsquo;
cookbook &lsquo;nodejs&rsquo;, &lsquo;>= 0.8&rsquo;
cookbook &lsquo;ruby_build&rsquo;
cookbook &lsquo;rbenv&rsquo;, github: &ldquo;fnichol/chef-rbenv&rdquo;
```</p>

<p>ソースを指定しない場合はopscodeからダウンロードされることになる．<br/>
以下のコマンドを用いて指定したcookbookをインストールする．</p>

<p><code>
berks install -p cookbooks
</code></p>

<p>MySQLのCookbook Ver.が古かったため，MySQLに関しては以下のサイトからCookbookを利用させて頂いた．<br/>
<a href="http://qiita.com/k-motoyan/items/25e64dc054abfa0ff7cb">chefで作るmysql</a><br/>
このmysqlフォルダをcookbookフォルダ以下に設置する．</p>

<p>最後に，<code>nodes/isucon.json</code>ファイルを以下の通り編集する．<br/>
rbenvを設定する際に，以下のページを参考にした．<br/>
<a href="http://qiita.com/ychubachi@github/items/befe8ab4cd0765643628">Chefを新しくしてrbenvをberkshellでvagrantのUbuntuにインストール</a></p>

<p>```
{
  &ldquo;rbenv&rdquo;: {</p>

<pre><code>"rubies": ["2.0.0-p195"],
"global": "2.0.0-p195",
"gems": {
  "2.0.0-p195": [
    {"name": "bundler"}
  ]
}
</code></pre>

<p>  },
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"git",
"nodejs",
"ruby_build",
"rbenv::system",
"mysql"
</code></pre>

<p>  ]
}
```</p>

<p>ここまで出来たら，以下のコマンドでVMに送る．</p>

<p><code>
knife solo cook isucon
</code></p>

<p>こんな感じ．<br/>
力尽きたのでここまで(^_^;)</p>
]]></content>
  </entry>
  
</feed>
