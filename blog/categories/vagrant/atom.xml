<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | 酒飲みの備忘録]]></title>
  <link href="http://amacbee.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://amacbee.github.io/"/>
  <updated>2013-10-04T11:10:09+09:00</updated>
  <id>http://amacbee.github.io/</id>
  <author>
    <name><![CDATA[a.macbee]]></name>
    <email><![CDATA[a.macbee@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef+BerkshelfでISUCON環境の構築]]></title>
    <link href="http://amacbee.github.io/blog/2013/10/03/1/"/>
    <updated>2013-10-03T04:15:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/10/03/1</id>
    <content type="html"><![CDATA[<p>週末のISUCONに向け，VM上にChef+Berkshelfで過去大会の環境を構築して色々と試してます．<br/>
可能な限り楽をして環境を用意がメインテーマです．<br/>
折角なので，その環境構築方法を一部紹介．</p>

<!-- more -->


<h1>事前準備</h1>

<p><a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>で作成した<code>centos6.4</code>のboxを利用して，ISUCONテスト環境用の環境を構築する．<br/>
以下のとおり実行．</p>

<p><code>
$ vagrant init centos-6.4
$ vagrant up
$ vagrant ssh-config --host isucon &gt;&gt; ~/.ssh/config
</code></p>

<p>次に，Chefのレポジトリを作成し，ホストにChefをインストールする．<br/>
※コマンドの詳細に関しては，<a href="http://amacbee.github.io/blog/2013/07/16/2/">以前の記事</a>を参照．</p>

<p><code>
$ knife solo init chef-repo
$ cd chef-repo
$ git init
$ git add .
$ git commit -m "Initial commit"
$ knife solo prepare vagrant@isucon
</code></p>

<h1>Berkshelfの設定</h1>

<p>他の人が作ったCookbookを利用するために，Cookbook管理ツールである<a href="http://berkshelf.com/">Berkshelf</a>を導入する．<br/></p>

<p><code>
$ gem install berkshelf
$ rbenv rehash
</code></p>

<h1>ISUCON2環境の構築</h1>

<p>準備ができたところで，実際にISUCONの環境を構築していく．
今回は，例としてISUCON2の環境を構築してみる(使用する言語はruby)．
詳細は下記サイトを参照．<br/>
サイト：<a href="http://blog.livedoor.jp/techblog/archives/67728751.html">自家製 #isucon2 のつくりかた</a></p>

<p>まず，利用できる既存のCookbookを導入する．<br/>
chef-repo内に<code>Berksfile</code>を作成し，以下の内容で保存する．<br/></p>

<p>```
site :opscode</p>

<p>cookbook &lsquo;git&rsquo;
cookbook &lsquo;nodejs&rsquo;, &lsquo;>= 0.8&rsquo;
cookbook &lsquo;ruby_build&rsquo;
cookbook &lsquo;rbenv&rsquo;, github: &ldquo;fnichol/chef-rbenv&rdquo;
```</p>

<p>ソースを指定しない場合はopscodeからダウンロードされることになる．<br/>
以下のコマンドを用いて指定したcookbookをインストールする．</p>

<p><code>
berks install -p cookbooks
</code></p>

<p>MySQLのCookbook Ver.が古かったため，MySQLに関しては以下のサイトからCookbookを利用させて頂いた．<br/>
<a href="http://qiita.com/k-motoyan/items/25e64dc054abfa0ff7cb">chefで作るmysql</a><br/>
このmysqlフォルダをcookbookフォルダ以下に設置する．</p>

<p>最後に，<code>nodes/isucon.json</code>ファイルを以下の通り編集する．<br/>
rbenvを設定する際に，以下のページを参考にした．<br/>
<a href="http://qiita.com/ychubachi@github/items/befe8ab4cd0765643628">Chefを新しくしてrbenvをberkshellでvagrantのUbuntuにインストール</a></p>

<p>```
{
  &ldquo;rbenv&rdquo;: {</p>

<pre><code>"rubies": ["2.0.0-p195"],
"global": "2.0.0-p195",
"gems": {
  "2.0.0-p195": [
    {"name": "bundler"}
  ]
}
</code></pre>

<p>  },
  &ldquo;run_list&rdquo;: [</p>

<pre><code>"git",
"nodejs",
"ruby_build",
"rbenv::system",
"mysql"
</code></pre>

<p>  ]
}
```</p>

<p>ここまで出来たら，以下のコマンドでVMに送る．</p>

<p><code>
knife solo cook isucon
</code></p>

<p>こんな感じ．<br/>
力尽きたのでここまで(^_^;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant + knife-solo + chef-soloでHello Chef!]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/16/2/"/>
    <updated>2013-07-16T08:27:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/16/2</id>
    <content type="html"><![CDATA[<p><a href="http://amacbee.github.io/blog/2013/07/15/1/">前々回</a>取り上げたVagrantと，環境構築を自動化するツールであるChef Soloを利用して，インフラのコード化にチャレンジ．</p>

<!-- more -->


<h1>はじめに</h1>

<p>NLPな研究室に属するサーバ管理者が，各種マシンの設定を自動化する技術を学ぶためにChefに手を出した話． <br />
今回は，VagrantとChefを実際に動かしてみて，Hello Chef!を実行するところまでをまとめる．<br />
なお，これら一連の手順は，下記の文献を参考にしている．</p>

<p>参考：<a href="http://www.amazon.co.jp/%E5%85%A5%E9%96%80Chef-Solo-Infrastructure-Code-ebook/dp/B00BSPH158">入門Chef Solo &ndash; Infrastructure as Code [Kindle版]</a> <br />
<img src="http://ec2.images-amazon.com/images/I/31u6VLGX2kL._AA278_PIkin4,BottomRight,-51,22_AA300_SH20_OU09_.jpg" alt="入門Chef Solo - Infrastructure as Code" />
※大変良書．この記事を読むよりも，この本を買って読む方が何倍も理解が深まる．</p>

<h1>環境</h1>

<ul>
<li>Virtual Box 4.2.18</li>
<li>Vagrant 1.3.3</li>
</ul>


<h1>Vagrant側の設定</h1>

<p>Cent OS 6.4上に環境を構築する． <br /></p>

<p><code>
$ vagrant box add centos-6.4 http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130427.box
$ vagrant init
</code></p>

<p><code>vagrant up</code>コマンドを実行する前に，ネットワーク設定を編集する．<br />
ホストOS側からゲストOSへのネットワークアクセスをアクティブにし，かつゲストOSのIPを192.168.50.12に設定する．<br />
※仕様変更により，参考書通りに書いても動作しないので注意．</p>

<p>```</p>

<h1>Vagrantfile</h1>

<p>Vagrant::Config.run do |config|</p>

<pre><code>config.vm.box = "centos-6.4"
# こちらでは動かないので注意
# config.vm.network :hostonly, "192.168.50.12"
# こちらで書き直す
config.vm.network :private_network, ip: "192.168.50.12"

# VMのマシン名設定（おこのみで）
config.vm.provider :virtualbox do |vb|
    vb.name = "hello-chef"
end
</code></pre>

<p>```</p>

<p><code>vagrant up</code>で起動する． <br />
またknife-soloというツールを利用するために，ゲストOSにsshアクセス出来るようssh-configの設定をホスト側のconfigに書き加えておく（今回は，ホスト名：helloc）．</p>

<p><code>
$ vagrant ssh-config --host helloc
Host helloc
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile "/Users/makabi/.vagrant.d/insecure_private_key"
  IdentitiesOnly yes
  LogLevel FATAL
$ vagrant ssh-config --host helloc &gt;&gt; ~/.ssh/config
</code></p>

<p><code>ssh helloc</code>して，ログイン出来たら成功である．<br />
さらに<a href="http://amacbee.github.io/blog/2013/07/16/1/">前回</a>紹介した，saharaも入れておくと良い．</p>

<h1>Chef の導入</h1>

<p>Opscodeが提供しているスクリプトを利用することで，簡単にChefを導入することができる．</p>

<p><code>
$ curl -L http://www.opscode.com/chef/install.sh | sudo bash
</code></p>

<p>または，<code>gem install chef</code>でインストールすることも可能．<br /></p>

<p>次に<code>knife</code>の初期設定を行う． <br />
<code>knife</code>とは，Chefをインストールすると自動でインストールされる，レポジトリ操作用のツールである．<br />
以下のコマンドを実行する（色々聞かれるが，全てデフォルトでOK）．</p>

<p><code>
$ knife configure
</code></p>

<p>完了すると，~/.chef/knife.rb に<code>knife</code>の設定ファイルが保存される．</p>

<h1>knife-solo の導入</h1>

<p>通常，Chef Soloの各種設定はゲストOS側にログインした上で行われる． <br />
しかしこれだと煩雑なので，リモートから<code>chef-solo</code>を実行できる，<code>knife-solo</code>を導入する．
（<code>knife-solo</code>を利用しない場合に関しては，参考図書の2章と3章で説明されているので，ご一読下さい）． <br />
<code>knife-solo</code>は，<code>knife</code>コマンドに<code>chef-solo</code>向けのコマンドを多数追加するものである． <br />
最新版である0.3.0を導入するために，Versionを指定する．</p>

<p><code>
$ gem install -v "&gt;=0.3" knife-solo
</code></p>

<h1>knife-solo + chef-solo でHello Chef!</h1>

<p>大まかな流れは以下の通りである．</p>

<ol>
<li>レポジトリの作成</li>
<li>ホストに<code>chef-solo</code>をインストール</li>
<li>クックブックの作成</li>
<li>レシピの作成</li>
<li>レシピ転送 &amp; リモート実行</li>
</ol>


<h2>レポジトリの作成</h2>

<p>キッチンとも呼ばれる．作業用ディレクトリ． <br />
1システム1レポジトリ程度の粒度である．</p>

<p><code>
$ knife solo init chef-repo
</code></p>

<p>0.3.0からは，テンポラリディレクトリやクックブックのパスを指定する<code>solo.rb</code>の設定ファイルは生成されない． <br />
この下をバージョン管理しておく．</p>

<p><code>
$ cd chef-repo
$ git init
$ git add .
$ git commit -m "initial commit"
</code></p>

<h2>ホストにchef-soloをインストール</h2>

<p>指定したサーバに<code>chef-solo</code>をインストール． <br />
このときサーバに必要なのは，ssh &amp; sudoできるログインアカウントだけである． <br /></p>

<p><code>
$ knife solo prepare helloc
$ tree chef-repo/
chef-repo/
├── Berksfile
├── cookbooks
├── data_bags
├── nodes
│   └── helloc.json
├── roles
└── site-cookbooks
</code></p>

<p>これで，nodesディレクトリ以下にhelloc.jsonファイルが作成される． <br />
これは，Chef Solo実行時に実行するレシピ群などを記載しておくファイルである． <br />
各ディレクトリの説明を以下に示す．</p>

<ul>
<li>cookbooks, site-cookbooks
クックブックを格納するディレクトリ．cookbooksには第三者の作ったクックブックを，site-cookbooksには自分の作ったクックブックを入れることが推奨されている．</li>
<li>nodes
ノード毎のjsonファイルの格納場所．</li>
<li>data_bags, roles に関しては省略．</li>
</ul>


<h2>クックブックの作成</h2>

<p><code>knife</code>コマンドを利用して，site-cookbooksディレクトリにhelloというクックブックを作成</p>

<p><code>
$ knife cookbook create hello -o site-cookbooks
</code></p>

<h2>レシピの作成</h2>

<p><code>knife</code>コマンド実行時にレシピの雛形は作成されているため，これを編集する． <br /></p>

<p>```
$ emacs site-cookbooks/hello/recipes/default.rb</p>

<p>#</p>

<h1>Cookbook Name:: hello</h1>

<h1>Recipe:: default</h1>

<p>#</p>

<h1>Copyright 2013, YOUR_COMPANY_NAME</h1>

<p>#</p>

<h1>All rights reserved &ndash; Do Not Redistribute</h1>

<p>#</p>

<p>log &ldquo;Hello, Chef!&rdquo;
```</p>

<p><code>Resource</code>と呼ばれる様々な命令を与えることで，サーバの状態を決定できる．
主なコマンドの例を以下に紹介する．</p>

<ul>
<li>Package <br />
Packageの状態を記述する（インストール）</li>
<li>Log <br />
Chefのログを操作する</li>
<li>Service <br />
サービスを操作する（サービスの起動／停止，OSブート時に起動するサービスとして登録）</li>
<li>Template <br />
設定ファイルをChefでいじる
指定されたテンプレートを展開し，設定ファイルとして利用できる</li>
</ul>


<p>Chef Solo実行時に実行するレシピも記述しておく． <br />
helloc.jsonを編集する．</p>

<p>```
{</p>

<pre><code>"run_list": [
    "recipe[hello]"
]
</code></pre>

<p>}
```</p>

<h1>レシピ転送 &amp; リモート実行</h1>

<p>最後に，以下のコマンドを用いてホストで<code>chef-solo</code>を実行する．</p>

<p><code>
$ knife solo cook helloc
</code></p>

<p>ここで，以下のような出力がえられれば成功である．</p>

<p>```
Running Chef on helloc&hellip;
Checking Chef version&hellip;
Uploading the kitchen&hellip;
Generating solo config&hellip;
Running Chef&hellip;
Starting Chef Client, version 11.6.0
Compiling Cookbooks&hellip;
Converging 1 resources
Recipe: hello::default
  * log[Hello, Chef!] action write</p>

<p>Chef Client finished, 1 resources updated
```</p>

<p>ここまでがおおまかな流れとなる． <br />
簡単！素晴らしい！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sahara pluginの導入]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/16/1/"/>
    <updated>2013-07-16T07:03:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/16/1</id>
    <content type="html"><![CDATA[<p><a href="http://amacbee.github.io/blog/2013/07/15/1/">前回</a>取り上げたVagrantに，sahara pluginを導入する．</p>

<!-- more -->


<h1>sahara plugin</h1>

<p>OSの状態を記憶し，その地点までのロールバックを可能にする． <br />
gemを利用してインストールできる．</p>

<p><code>
$ vagrant plugin install sahara
</code></p>

<h1>ロールバックまでの手順</h1>

<p><code>sandbox</code>モードをonにしておくことで，その地点までのロールバックできる． <br />
ロールバックした状態に決定するためには，commitが必要．</p>

<p><code>
$ vagrant sandbox on
$ vagrant sandbox rollback
$ vagrant sandbox commit
$ vagrant sandbox off
</code></p>

<p>これで間違った変更を加えてしまった場合でも，容易にsandboxをonした地点に戻ることができる．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrantの使い方まとめ]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/15/1/"/>
    <updated>2013-07-15T18:56:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/15/1</id>
    <content type="html"><![CDATA[<p>Vagrantの使い方まとめ． <br />
Vagrantを利用することで，Virtual BoxやVMWare Fusionで作成された仮想環境を，コマンドラインから簡単に利用できる． <br />
公式サイト：<a href="http://www.vagrantup.com/">http://www.vagrantup.com/</a></p>

<!-- more -->


<h1>事前に用意した環境</h1>

<p>Virtual Box 4.1.26<br />
Downloads | Virtual Box：<a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>

<h1>インストール</h1>

<p>VagrantはRuby製のツールで，Rubygems.orgに公開されているため，<code>gem</code>を利用して以下の通り簡単にインストールできる。</p>

<p><code>
$ gem install vagrant
</code></p>

<p>ただし現状Rubygems.orgに公開されているVer.は1.0.7止まりなので，最新版を利用したい場合は専用のインストーラを利用する必要がある（今回利用するのは，Ver.1.2.2）． <br />
vagrant | Rubygems.org：<a href="http://rubygems.org/gems/vagrant">http://rubygems.org/gems/vagrant</a> <br />
Vagrant Downloads：<a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a></p>

<h1>仮想環境構築の流れ</h1>

<p>以下の流れで仮想環境を構築していく．</p>

<ol>
<li>必要なVagrant Boxの追加</li>
<li>Vagrantの初期化（設定ファイル作成）</li>
<li>Vagrantの実行（仮想マシンの起動）</li>
<li>仮想環境にログイン（ssh）</li>
</ol>


<p>それぞれを順に説明する．</p>

<h2>必要なVagrant Boxの追加</h2>

<p>Vagrantには，既にいくつかベースとなる仮想環境（=Box）が用意されている（リンク先参照）． <br /></p>

<p><a href="http://www.vagrantbox.es/">Vagrantbox.es</a></p>

<p>利用者は必要なBoxを追加するだけで，簡単に仮想環境が構築できる． <br />
Boxの追加には以下のコマンドを利用する． <br />
ここで，titleは作成する仮想環境につける名前，urlは利用するboxのURLである．</p>

<p><code>
$ vagrant box add {title} {url}
e.g. vagrant box add test https://dl.dropbox.com/u/7225008/Vagrant/CentOS-6.3-x86_64-minimal.box
</code></p>

<p>今回は，Cent OS 6.3 minimal Boxを利用して，testという名前の環境を構築する． <br />
作成した環境のリストを確認したり，作成した環境を削除するには，それぞれ以下のコマンドを用いる． <br /></p>

<p><code>
$ vagrant box list
$ vagrant box remove {title}
</code></p>

<h2>Vagrantの初期化（設定ファイル作成）</h2>

<p>作成した環境の初期化を行う． <br />
以下のコマンドを実行すると，初期化と共に仮想環境の設定ファイル（=Vagrantfile）が作成される．</p>

<p><code>
$ vagrant init {title}
e.g. vagrant init test
</code></p>

<p>ここで作成されるVagrantfileを利用することで，仮想環境の各種設定が行える．</p>

<h2>Vagrantの実行（仮想マシンの起動）</h2>

<p>ここまで処理が終了したら，後は以下のコマンドを利用することで仮想環境が立ち上がる．</p>

<p><code>
$ vagrant up
</code></p>

<p>なお，仮想環境の停止や再起動には，それぞれ以下のコマンドを実行する．</p>

<p><code>
$ vagrant halt
$ vagrant reload
</code></p>

<p>また，仮想環境内の設定をリセットしたい場合には，以下のコマンドを実行する．</p>

<p><code>
$ vagrant destroy
</code></p>

<h2>仮想環境にログイン（ssh）</h2>

<p>以下のコマンドで仮想環境にsshできる．</p>

<p><code>
$ vagrant ssh
</code></p>

<p>なおssh接続の設定に関しては，以下のコマンドで確認できる．</p>

<p><code>
$ vagrant ssh-config
</code></p>
]]></content>
  </entry>
  
</feed>
