<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sublime | 酒飲みの備忘録]]></title>
  <link href="http://amacbee.github.io/blog/categories/sublime/atom.xml" rel="self"/>
  <link href="http://amacbee.github.io/"/>
  <updated>2013-12-08T23:22:56+09:00</updated>
  <id>http://amacbee.github.io/</id>
  <author>
    <name><![CDATA[a.macbee]]></name>
    <email><![CDATA[a.macbee@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime上からプロジェクトをGithubにpushするまで]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/05/1/"/>
    <updated>2013-07-05T04:34:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/05/1</id>
    <content type="html"><![CDATA[<p>SublimeのGitプラグイン（sublime-text-2-git）を利用して，Sublime内からプロジェクトをGithubにpushするまでをまとめます．<br />
リモートリポジトリとのやりとりあたりで手間取ったのでメモ代わりに．<br />
なお，プロジェクト格納用のリポジトリは既にGithub上に用意されており，かつ公開鍵の登録等も終わっているものとします．</p>

<!-- more -->


<h1>SublimeにGit用のプラグインを導入</h1>

<p><code>cmd+Shift+p</code>でコマンドパレットを開き，<code>Package Control: Install Package</code>→<code>Git</code>と選択し，Gitプラグインを導入．<br />
Githubリポジトリはリンク先参照：<a href="https://github.com/kemayo/sublime-text-2-git">sublime-text-2-git</a></p>

<h1>Sublime上からプロジェクトをGithubにpushするまで</h1>

<p>Sublime用のGitプラグインは非常によくできたプラグインで，Git操作に慣れた者であれば直感的に利用できる． <br />
ここでは細かい説明は避け，README.mdファイルをリポジトリにpushするまでをまとめる．</p>

<ul>
<li>コマンドパレットから<code>Git: Init</code>を選択し，initするGit directoryを入力する．ディレクトリは先に作成しておく必要がある．</li>
<li>README.mdファイルを作成する．</li>
<li>コマンドパレットから<code>Git: Add...</code>を選択し，README.mdファイルを選択する．</li>
<li>コマンドパレットから<code>Git: Commit</code>を選択する．するとCommit Messageの入力を求められるので，入力して終了する（入力が完了すると以下のようなメッセージが出力されるはず）．
<code>
[master (root-commit) 55b8e17] Initial Commit
0 files changed, 0 insertions(+), 0 deletions(-)
create mode 100644 README.md
</code></li>
<li>push先のリポジトリを指定する．プラグインには<code>Git: Remote add</code>的なコマンドは存在しないので，カスタムコマンドを利用する．<code>Git: Custom Command</code>を選択し，以下のように入力．
<code>
remote add branch名 https://あなたのアカウント:パスワード@github.com/あなたのアカウント/push先のリポジトリ.git
e.g. remote add origin https://amacbee:password@github.com/amacbee/test4sublime.git
</code></li>
<li>コマンドパレットから<code>Git: Push Current Branch</code>でリポジトリにpush出来る（うまくpush出来れば以下の様なメッセージが出力されるはず）．
```
To <a href="https://amacbee:password@github.com/amacbee/test4sublime.git">https://amacbee:password@github.com/amacbee/test4sublime.git</a></li>
<li>[new branch]      master &ndash;> master
```</li>
</ul>


<p>こんな感じ．pushするたびにPasswrodが生のまま表示されたり色々と問題もある^^;<br />
しかし現状ではpushコマンドを入力した際にアカウント名やパスワードの入力を求める画面が表示されないため，この方法しかない気がする（どなたか良い方法を知っている方がいらっしゃればアドバイス下さい）．<br />
<code>Git: Status</code>を利用して現在の状態を確認したり，<code>Git: log</code>を利用してこれまでの履歴を確認することも可能である．</p>

<p>よし，とりあえず満足！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[恋に落ちるエディタ - Sublime Text - との関係をリセット]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/27/5/"/>
    <updated>2013-05-27T07:30:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/27/5</id>
    <content type="html"><![CDATA[<p>※前サイトからの移行です．</p>

<!-- more -->


<hr />

<p>もともとEmacs大好き！な私ですが，ちょっと前から恋に落ちると噂のエディタ &ndash; Sublime Text &ndash; とEmacsの2刀流使い的なことをしていました．  <br/>
Sublime Text凄くカッコ良いしPython and JSONベースでごにょごにょ出来るの素晴らしいし色々な環境構築も楽なのでいずれは移行したい，でも現状は.emacs.d/*の方が設定充実してる…といった感じだったのですが，ここ最近新しい言語／環境を勉強する機会が増え，ここらで本格的にSublimeの設定見なおそう！と思いたち，1から設定をやり直しましたｗ  <br/>
以下はそのまとめです．  <br/></p>

<p>Sublime Text：<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a>  <br/>
（いつの間にかβ版じゃなくなっている。。。）</p>

<h2>Package Controlを導入</h2>

<p>まず最初にPackage Controlを導入する．これ一つで便利なPackage群をコマンド一発で入れられるようになる．便利．</p>

<ul>
<li><code>View</code> → <code>Show Console</code></li>
<li>以下のコードを入力</li>
</ul>


<p><code>python
import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'
</code></p>

<ul>
<li><code>Please restart Sublime Text to finish installation</code> が表示されるので，リスタート</li>
</ul>


<h2>Emacsキーバインドの設定</h2>

<p>Sublemacsproを導入．この一連の流れ簡単すぎて感激←</p>

<ul>
<li><code>cmd-Shift-p</code>でコマンドパレットを開き，<code>Package Control: Install Package</code>を選択</li>
<li><code>sublemacspro</code>を選択（emacsで検索すると候補にあがる！）</li>
</ul>


<h2>ユーザ設定ファイルを編集</h2>

<p><code>cmd-,</code>でユーザ設定ファイルを開き，これを編集する（JSON形式）．</p>

<h3>環境変数設定</h3>

<p><code>echo $PATH</code>で出力されるPATHを貼り付け．</p>

<p>```json
{</p>

<pre><code>"build_env":
{
    "PATH": "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:/usr/texbin"
}
</code></pre>

<p>}
```</p>

<h3>フォント設定</h3>

<p>プログラミング時に使うフォントとして，Rictyを指定．  <br/>
（Ricty自体の導入方法については延べません＞＜興味のある方はリンク先を参照：<a href="http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html%EF%BC%89">http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html%EF%BC%89</a>  <br/></p>

<p>```json
{</p>

<pre><code>"font_face": "Ricty",
"font_size": 14.0
</code></pre>

<p>}
```</p>

<h3>その他細かい設定</h3>

<p>```
{</p>

<pre><code>"highlight_line": true,     // 選択行のハイライト
"translate_tabs_to_spaces": true,    // tabをspaceに変換
"ignored_packages":     // viの設定はいらない
[
    "Vintage"
]
</code></pre>

<p>}
```</p>

<h2>TeX環境の構築</h2>

<p>論文を書いてる暇つぶｒｙ…に環境構築などやっているので，一番最初にTeX環境を整えてみた＼(^o^)／ｗ  <br/>
SublimeのTeX環境としてはLaTeXToolsが一般的．</p>

<ul>
<li><code>cmd+Shift+p</code> → <code>Package Control: Install Package</code> → <code>LaTeXTools</code></li>
<li><code>LaTeXTools/LaTeX.sublime-build</code>を開く</li>
<li>以下の通りに編集（Macについての記述は34行目付近）</li>
</ul>


<p>```
{</p>

<pre><code>"cmd": ["latexmk", "-cd",
    "-e", "\\$pdflatex = 'pdflatex %O -interaction=nonstopmode -synctex=1 %S'",
    //"-silent",
    "-f", "-pdf"],
</code></pre>

<p>}
```</p>

<p>↓↓↓</p>

<p>```
{</p>

<pre><code>"cmd": ["latexmk", "-cd", "-f", "-pv"],
</code></pre>

<p>}
```</p>

<p>以上で設定終了．<code>cmd+b</code>でbuildできる．</p>

<p>ここらで力尽きたので，その他の設定はまた後ほど．  <br/>
ちなみに各種プラグインの情報については，以下のサイトがおすすめ．  <br/>
<a href="http://powerful-code.com/blog/2012/11/plugins-for-st2/">http://powerful-code.com/blog/2012/11/plugins-for-st2/</a>  <br/>
<a href="http://blog.hifumi.info/mac/sublime-text-2-for-mac/">http://blog.hifumi.info/mac/sublime-text-2-for-mac/</a></p>

<p>…Octpressめちゃくちゃ気になってるんだよな．  <br/>
そのうち移行するかもです．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Pages+OctopressでBlog作成]]></title>
    <link href="http://amacbee.github.io/blog/2013/05/26/1/"/>
    <updated>2013-05-26T07:49:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/05/26/1</id>
    <content type="html"><![CDATA[<p>BloggerからGithub Pages+Octopressに乗り換えたのでそのまとめ．  <br/>
テスト投稿も兼ねてます．</p>

<p>Github Pages: <a href="http://pages.github.com/">http://pages.github.com/</a>  <br/>
Octopress: <a href="http://octopress.org/">http://octopress.org/</a></p>

<!-- more -->


<p>Github Pagesを利用することで，ウェブサイトをGitで管理し，更にはGithubへプッシュすることでウェブサイトを公開できる（細かい話は割愛）．
今回はOctopressというRailsで作られたframeworkを利用し，ローカルで作成したページを自動コミット／プッシュする．  <br/>
詳細についてはリンク先を参照：<a href="http://blog.eiel.info/blog/2013/02/17/github-pages/">http://blog.eiel.info/blog/2013/02/17/github-pages/</a></p>

<h2>ローカル環境</h2>

<p>OS: MacOS X 10.7</p>

<h2>環境構築手順</h2>

<h3>Github Repoの用意</h3>

<p>Github pagesを利用するために，Githubに<code>username.github.com</code>という名前でリポジトリを作成する（今回は，amacbee.github.com）．</p>

<h3>Ruby環境のセットアップ</h3>

<p>Macにおけるrubyのデフォルトは1.8.*だが，Octopress導入には1.9.3p194が必要となる(2013年5月現在)．
そこでVersion管理ツールrbenvを利用して，ruby環境を構築する．</p>

<p>まずはrbenvの導入．</p>

<p><code>text
$ brew install rbenv
$ brew install ruby-build
</code></p>

<p>.zshrcに以下を記述．</p>

<p>```sh</p>

<h1>rbenv setting</h1>

<p>export PATH=&ldquo;$HOME/.rbenv/bin:$PATH&rdquo;
eval &ldquo;$(rbenv init &ndash;)&rdquo;
```</p>

<p>rbenvのPATHを追加したら，以下の通りインストールして設定する．</p>

<p><code>text
$ rbenv install 1.9.3-p194
$ rbenv rehash
$ rbenv global 1.9.3-p194
</code></p>

<p>次にパッケージ（Gem）管理ツールであるbundleのインストール．</p>

<p><code>
$ gem install bundler
</code></p>

<p>これでOctopressを導入するためのRuby環境構築はひとまず終了．</p>

<h3>Octopressの導入</h3>

<p>適当なディレクトリにOctopressをcloneしてインストール．</p>

<p><code>
$ cd ~/Documents/
$ git clone https://github.com/imathis/octopress.git
$ cd octopress
$ bundle install
$ rake install
</code></p>

<p>これでOctopressが導入できた．  <br/>
正しく導入できたかを確認するために，以下のコマンドを実行する．</p>

<p><code>
$ rake generate
$ rake preview
</code></p>

<p><a href="http://localhost:4000">http://localhost:4000</a> を参照し，正しく導入できているかを確認する．</p>

<p>正しく導入できていた事を確認したら，デプロイする．
以下のコマンドを実行し，デプロイ先のリポジトリとして<code>git@github.com:amacbee/amacbee.github.com.git</code>を指定する．</p>

<p><code>
$ rake setup_github_pages
</code></p>

<p>これで指定したリポジトリのmasterに生成したファイルがcommitされた．
以下のコマンドを実行することで，push → デプロイされる．</p>

<p><code>
$ rake generate
$ rake deploy
</code></p>

<p>後述するSublime Textを利用することで，デプロイ処理はエディタ内で行うことができる．</p>

<p>力尽きたので投稿方法や各種設定等については割愛．</p>

<h2>「Sublime Text 2 Octopress」の導入</h2>

<p>OctopressをSublimeから利用するために環境を構築する．幸いなことに専用Packageが既に用意されていたため，Package Contorolから"Octopress"を導入（Package Contorolについては別記事参照）．  <br/>
このPackageに関する情報についてはリンク先を参照：<a href="https://github.com/blueplanet/sublime-text-2-octopress">https://github.com/blueplanet/sublime-text-2-octopress</a></p>

<p>READMEに従って，設定を以下の通りに書き換えた．  <br/>
Sublime Text 2 &ndash;> Preference &ndash;> Package Settings &ndash;> Octopress &ndash;> Setting &ndash; User</p>

<p>```json
{
  // path to your octopress
  &ldquo;octopress_path&rdquo;: &ldquo;~/Documents/octopress&rdquo;,</p>

<p>  // the shell to run commands with
  &ldquo;octopress_shell_executable&rdquo;: &ldquo;/bin/zsh&rdquo;,</p>

<p>  // command to run before calling rake, eg source ~/bash_profile to set up your local environment inc paths to ruby, rake etc.
  &ldquo;octopress_cmd_before_rake&rdquo; : &ldquo;source ~/.zshrc&rdquo;,</p>

<p>  // set to generate, deploy or generate_and_deploy if you wish to have your changes generated into the /public folder and/or deployed upon file save
  &ldquo;octopress_onsave_action&rdquo;: &ldquo;generate&rdquo;,</p>

<p>  // set to the extension of all new pages. This should be the same as in your Rakefile setting for new_page_ext
  &ldquo;octopress_page_extension&rdquo;: &ldquo;markdown&rdquo;,</p>

<p>  // set to the extension of all new posts. This should be the same as in your Rakefile setting for posts_dir
  &ldquo;octopress_posts_dir&rdquo;: &ldquo;_posts&rdquo;,</p>

<p>  // true or false
  &ldquo;use_bundle&rdquo;: false
}</p>

<p>```</p>

<p>しかし以下のようなエラーが発生．</p>

<p><code>text
error: Octopress exec failed. Please check octopress env, and try again.
You can check exec log in sublime console.
</code></p>

<p><code>cmd+`</code>でConsoleを開き，エラーメッセージを確認してみる．</p>

<p><code>
YAML Exception reading 2013-05-26-1.markdown: invalid byte sequence in US-ASCII
</code></p>

<p>文字コード周りでおこられているらしい．
そこで公式の「In the case of an error, please see the RVM or Rbenv errors」のページを参照したところ「rbenv」項目に以下の記述を発見した．</p>

<blockquote><p>mine ~/.bashrc looks like:</p>

<p>PATH=&ldquo;$HOME/.rbenv/versions/1.9.3-p194/bin:$PATH&rdquo;  <br/>
cmd_before_rake is source ~/.bashrc &amp;&amp; export LANG=en_US.UTF-8 &amp;&amp; export LC_ALL=en_US.UTF-8  <br/>
but you shall not include &amp;&amp; export LANG=en_US.UTF-8 &amp;&amp; export LC_ALL=en_US.UTF-8 if you write in English</p></blockquote>

<p>対処方に従いlocaleの設定を行う．以下のように設定を書き換えた．</p>

<p><code>json
{
  // command to run before calling rake, eg source ~/bash_profile to set up your local environment inc paths to ruby, rake etc.
  "octopress_cmd_before_rake" : "source ~/.zshrc &amp;&amp; export LANG=ja_JP.UTF-8 &amp;&amp; export LC_ALL=ja_JP.UTF-8",
}
</code></p>

<p>これで無事に動作した．</p>
]]></content>
  </entry>
  
</feed>
