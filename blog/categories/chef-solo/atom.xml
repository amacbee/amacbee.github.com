<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef_solo | 酒飲みの備忘録]]></title>
  <link href="http://amacbee.github.io/blog/categories/chef-solo/atom.xml" rel="self"/>
  <link href="http://amacbee.github.io/"/>
  <updated>2013-12-08T23:22:56+09:00</updated>
  <id>http://amacbee.github.io/</id>
  <author>
    <name><![CDATA[a.macbee]]></name>
    <email><![CDATA[a.macbee@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant + knife-solo + chef-soloでHello Chef!]]></title>
    <link href="http://amacbee.github.io/blog/2013/07/16/2/"/>
    <updated>2013-07-16T08:27:00+09:00</updated>
    <id>http://amacbee.github.io/blog/2013/07/16/2</id>
    <content type="html"><![CDATA[<p><a href="http://amacbee.github.io/blog/2013/07/15/1/">前々回</a>取り上げたVagrantと，環境構築を自動化するツールであるChef Soloを利用して，インフラのコード化にチャレンジ．</p>

<!-- more -->


<h1>はじめに</h1>

<p>NLPな研究室に属するサーバ管理者が，各種マシンの設定を自動化する技術を学ぶためにChefに手を出した話． <br />
今回は，VagrantとChefを実際に動かしてみて，Hello Chef!を実行するところまでをまとめる．<br />
なお，これら一連の手順は，下記の文献を参考にしている．</p>

<p>参考：<a href="http://www.amazon.co.jp/%E5%85%A5%E9%96%80Chef-Solo-Infrastructure-Code-ebook/dp/B00BSPH158">入門Chef Solo &ndash; Infrastructure as Code [Kindle版]</a> <br />
<img src="http://ec2.images-amazon.com/images/I/31u6VLGX2kL._AA278_PIkin4,BottomRight,-51,22_AA300_SH20_OU09_.jpg" alt="入門Chef Solo - Infrastructure as Code" />
※大変良書．この記事を読むよりも，この本を買って読む方が何倍も理解が深まる．</p>

<h1>環境</h1>

<ul>
<li>Virtual Box 4.2.18</li>
<li>Vagrant 1.3.3</li>
</ul>


<h1>Vagrant側の設定</h1>

<p>Cent OS 6.4上に環境を構築する． <br /></p>

<p><code>
$ vagrant box add centos-6.4 http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20130427.box
$ vagrant init
</code></p>

<p><code>vagrant up</code>コマンドを実行する前に，ネットワーク設定を編集する．<br />
ホストOS側からゲストOSへのネットワークアクセスをアクティブにし，かつゲストOSのIPを192.168.50.12に設定する．<br />
※仕様変更により，参考書通りに書いても動作しないので注意．</p>

<p>```</p>

<h1>Vagrantfile</h1>

<p>Vagrant::Config.run do |config|</p>

<pre><code>config.vm.box = "centos-6.4"
# こちらでは動かないので注意
# config.vm.network :hostonly, "192.168.50.12"
# こちらで書き直す
config.vm.network :private_network, ip: "192.168.50.12"

# VMのマシン名設定（おこのみで）
config.vm.provider :virtualbox do |vb|
    vb.name = "hello-chef"
end
</code></pre>

<p>```</p>

<p><code>vagrant up</code>で起動する． <br />
またknife-soloというツールを利用するために，ゲストOSにsshアクセス出来るようssh-configの設定をホスト側のconfigに書き加えておく（今回は，ホスト名：helloc）．</p>

<p><code>
$ vagrant ssh-config --host helloc
Host helloc
  HostName 127.0.0.1
  User vagrant
  Port 2222
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile "/Users/makabi/.vagrant.d/insecure_private_key"
  IdentitiesOnly yes
  LogLevel FATAL
$ vagrant ssh-config --host helloc &gt;&gt; ~/.ssh/config
</code></p>

<p><code>ssh helloc</code>して，ログイン出来たら成功である．<br />
さらに<a href="http://amacbee.github.io/blog/2013/07/16/1/">前回</a>紹介した，saharaも入れておくと良い．</p>

<h1>Chef の導入</h1>

<p>Opscodeが提供しているスクリプトを利用することで，簡単にChefを導入することができる．</p>

<p><code>
$ curl -L http://www.opscode.com/chef/install.sh | sudo bash
</code></p>

<p>または，<code>gem install chef</code>でインストールすることも可能．<br /></p>

<p>次に<code>knife</code>の初期設定を行う． <br />
<code>knife</code>とは，Chefをインストールすると自動でインストールされる，レポジトリ操作用のツールである．<br />
以下のコマンドを実行する（色々聞かれるが，全てデフォルトでOK）．</p>

<p><code>
$ knife configure
</code></p>

<p>完了すると，~/.chef/knife.rb に<code>knife</code>の設定ファイルが保存される．</p>

<h1>knife-solo の導入</h1>

<p>通常，Chef Soloの各種設定はゲストOS側にログインした上で行われる． <br />
しかしこれだと煩雑なので，リモートから<code>chef-solo</code>を実行できる，<code>knife-solo</code>を導入する．
（<code>knife-solo</code>を利用しない場合に関しては，参考図書の2章と3章で説明されているので，ご一読下さい）． <br />
<code>knife-solo</code>は，<code>knife</code>コマンドに<code>chef-solo</code>向けのコマンドを多数追加するものである． <br />
最新版である0.3.0を導入するために，Versionを指定する．</p>

<p><code>
$ gem install -v "&gt;=0.3" knife-solo
</code></p>

<h1>knife-solo + chef-solo でHello Chef!</h1>

<p>大まかな流れは以下の通りである．</p>

<ol>
<li>レポジトリの作成</li>
<li>ホストに<code>chef-solo</code>をインストール</li>
<li>クックブックの作成</li>
<li>レシピの作成</li>
<li>レシピ転送 &amp; リモート実行</li>
</ol>


<h2>レポジトリの作成</h2>

<p>キッチンとも呼ばれる．作業用ディレクトリ． <br />
1システム1レポジトリ程度の粒度である．</p>

<p><code>
$ knife solo init chef-repo
</code></p>

<p>0.3.0からは，テンポラリディレクトリやクックブックのパスを指定する<code>solo.rb</code>の設定ファイルは生成されない． <br />
この下をバージョン管理しておく．</p>

<p><code>
$ cd chef-repo
$ git init
$ git add .
$ git commit -m "initial commit"
</code></p>

<h2>ホストにchef-soloをインストール</h2>

<p>指定したサーバに<code>chef-solo</code>をインストール． <br />
このときサーバに必要なのは，ssh &amp; sudoできるログインアカウントだけである． <br /></p>

<p><code>
$ knife solo prepare helloc
$ tree chef-repo/
chef-repo/
├── Berksfile
├── cookbooks
├── data_bags
├── nodes
│   └── helloc.json
├── roles
└── site-cookbooks
</code></p>

<p>これで，nodesディレクトリ以下にhelloc.jsonファイルが作成される． <br />
これは，Chef Solo実行時に実行するレシピ群などを記載しておくファイルである． <br />
各ディレクトリの説明を以下に示す．</p>

<ul>
<li>cookbooks, site-cookbooks
クックブックを格納するディレクトリ．cookbooksには第三者の作ったクックブックを，site-cookbooksには自分の作ったクックブックを入れることが推奨されている．</li>
<li>nodes
ノード毎のjsonファイルの格納場所．</li>
<li>data_bags, roles に関しては省略．</li>
</ul>


<h2>クックブックの作成</h2>

<p><code>knife</code>コマンドを利用して，site-cookbooksディレクトリにhelloというクックブックを作成</p>

<p><code>
$ knife cookbook create hello -o site-cookbooks
</code></p>

<h2>レシピの作成</h2>

<p><code>knife</code>コマンド実行時にレシピの雛形は作成されているため，これを編集する． <br /></p>

<p>```
$ emacs site-cookbooks/hello/recipes/default.rb</p>

<p>#</p>

<h1>Cookbook Name:: hello</h1>

<h1>Recipe:: default</h1>

<p>#</p>

<h1>Copyright 2013, YOUR_COMPANY_NAME</h1>

<p>#</p>

<h1>All rights reserved &ndash; Do Not Redistribute</h1>

<p>#</p>

<p>log &ldquo;Hello, Chef!&rdquo;
```</p>

<p><code>Resource</code>と呼ばれる様々な命令を与えることで，サーバの状態を決定できる．
主なコマンドの例を以下に紹介する．</p>

<ul>
<li>Package <br />
Packageの状態を記述する（インストール）</li>
<li>Log <br />
Chefのログを操作する</li>
<li>Service <br />
サービスを操作する（サービスの起動／停止，OSブート時に起動するサービスとして登録）</li>
<li>Template <br />
設定ファイルをChefでいじる
指定されたテンプレートを展開し，設定ファイルとして利用できる</li>
</ul>


<p>Chef Solo実行時に実行するレシピも記述しておく． <br />
helloc.jsonを編集する．</p>

<p>```
{</p>

<pre><code>"run_list": [
    "recipe[hello]"
]
</code></pre>

<p>}
```</p>

<h1>レシピ転送 &amp; リモート実行</h1>

<p>最後に，以下のコマンドを用いてホストで<code>chef-solo</code>を実行する．</p>

<p><code>
$ knife solo cook helloc
</code></p>

<p>ここで，以下のような出力がえられれば成功である．</p>

<p>```
Running Chef on helloc&hellip;
Checking Chef version&hellip;
Uploading the kitchen&hellip;
Generating solo config&hellip;
Running Chef&hellip;
Starting Chef Client, version 11.6.0
Compiling Cookbooks&hellip;
Converging 1 resources
Recipe: hello::default
  * log[Hello, Chef!] action write</p>

<p>Chef Client finished, 1 resources updated
```</p>

<p>ここまでがおおまかな流れとなる． <br />
簡単！素晴らしい！！</p>
]]></content>
  </entry>
  
</feed>
